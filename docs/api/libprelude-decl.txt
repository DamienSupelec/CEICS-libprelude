<MACRO>
<NAME>TOK_STRING</NAME>
#define TOK_STRING 258
</MACRO>
<MACRO>
<NAME>TOK_RELATION_SUBSTRING</NAME>
#define TOK_RELATION_SUBSTRING 259
</MACRO>
<MACRO>
<NAME>TOK_RELATION_REGEXP</NAME>
#define TOK_RELATION_REGEXP 260
</MACRO>
<MACRO>
<NAME>TOK_RELATION_GREATER</NAME>
#define TOK_RELATION_GREATER 261
</MACRO>
<MACRO>
<NAME>TOK_RELATION_GREATER_OR_EQUAL</NAME>
#define TOK_RELATION_GREATER_OR_EQUAL 262
</MACRO>
<MACRO>
<NAME>TOK_RELATION_LESS</NAME>
#define TOK_RELATION_LESS 263
</MACRO>
<MACRO>
<NAME>TOK_RELATION_LESS_OR_EQUAL</NAME>
#define TOK_RELATION_LESS_OR_EQUAL 264
</MACRO>
<MACRO>
<NAME>TOK_RELATION_EQUAL</NAME>
#define TOK_RELATION_EQUAL 265
</MACRO>
<MACRO>
<NAME>TOK_RELATION_NOT_EQUAL</NAME>
#define TOK_RELATION_NOT_EQUAL 266
</MACRO>
<MACRO>
<NAME>TOK_RELATION_IS_NULL</NAME>
#define TOK_RELATION_IS_NULL 267
</MACRO>
<MACRO>
<NAME>TOK_OPERATOR_AND</NAME>
#define TOK_OPERATOR_AND 268
</MACRO>
<MACRO>
<NAME>TOK_OPERATOR_OR</NAME>
#define TOK_OPERATOR_OR 269
</MACRO>
<MACRO>
<NAME>yystype</NAME>
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
</MACRO>
<MACRO>
<NAME>YYSTYPE_IS_DECLARED</NAME>
# define YYSTYPE_IS_DECLARED 1
</MACRO>
<MACRO>
<NAME>YYSTYPE_IS_TRIVIAL</NAME>
# define YYSTYPE_IS_TRIVIAL 1
</MACRO>
<VARIABLE>
<NAME>yylval</NAME>
extern YYSTYPE yylval;
</VARIABLE>
<MACRO>
<NAME>LISTED_OBJECT</NAME>
#define LISTED_OBJECT(name, type) prelude_list_t name
</MACRO>
<MACRO>
<NAME>IS_LISTED</NAME>
#define IS_LISTED prelude_list_t list
</MACRO>
<MACRO>
<NAME>UNION</NAME>
#define	UNION(type, var) type var; union
</MACRO>
<MACRO>
<NAME>UNION_MEMBER</NAME>
#define	UNION_MEMBER(value, type, name) type name
</MACRO>
<MACRO>
<NAME>ENUM</NAME>
#define ENUM(...) typedef enum
</MACRO>
<MACRO>
<NAME>PRE_DECLARE</NAME>
#define PRE_DECLARE(type, class)
</MACRO>
<MACRO>
<NAME>TYPE_ID</NAME>
#define TYPE_ID(type, id) type
</MACRO>
<MACRO>
<NAME>PRIMITIVE_TYPE</NAME>
#define PRIMITIVE_TYPE(type)
</MACRO>
<MACRO>
<NAME>PRIMITIVE_TYPE_STRUCT</NAME>
#define PRIMITIVE_TYPE_STRUCT(type)
</MACRO>
<MACRO>
<NAME>HIDE</NAME>
#define HIDE(type, name) type name
</MACRO>
<MACRO>
<NAME>REFCOUNT</NAME>
#define REFCOUNT int refcount
</MACRO>
<MACRO>
<NAME>DYNAMIC_IDENT</NAME>
#define DYNAMIC_IDENT(x) uint64_t x
</MACRO>
<MACRO>
<NAME>IDMEF_VERSION</NAME>
#define IDMEF_VERSION "0.6"
</MACRO>
<MACRO>
<NAME>PRELUDE_LINKED_OBJECT</NAME>
#define PRELUDE_LINKED_OBJECT \
        prelude_list_t list
</MACRO>
<STRUCT>
<NAME>prelude_linked_object_t</NAME>
struct prelude_linked_object_t
{
        PRELUDE_LINKED_OBJECT;
};
</STRUCT>
<MACRO>
<NAME>prelude_linked_object_get_object</NAME>
#define prelude_linked_object_get_object(listentry, type)  \
        (type *) prelude_list_entry(listentry, prelude_linked_object_t, list)
</MACRO>
<ENUM>
<NAME>idmef_additional_data_type_t</NAME>
typedef enum {
        IDMEF_ADDITIONAL_DATA_TYPE_ERROR = -1,
        IDMEF_ADDITIONAL_DATA_TYPE_STRING = 0,
        IDMEF_ADDITIONAL_DATA_TYPE_BOOLEAN = 1,
        IDMEF_ADDITIONAL_DATA_TYPE_BYTE = 2,
        IDMEF_ADDITIONAL_DATA_TYPE_CHARACTER = 3,
        IDMEF_ADDITIONAL_DATA_TYPE_DATE_TIME = 4,
        IDMEF_ADDITIONAL_DATA_TYPE_INTEGER = 5,
        IDMEF_ADDITIONAL_DATA_TYPE_NTPSTAMP = 6,
        IDMEF_ADDITIONAL_DATA_TYPE_PORTLIST = 7,
        IDMEF_ADDITIONAL_DATA_TYPE_REAL = 8,
        IDMEF_ADDITIONAL_DATA_TYPE_XML = 9
} idmef_additional_data_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_additional_data_type_to_numeric</NAME>
<RETURNS>idmef_additional_data_type_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_type_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_additional_data_type_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new</NAME>
<RETURNS>idmef_additional_data_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_ref</NAME>
<RETURNS>idmef_additional_data_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_type</NAME>
<RETURNS>idmef_additional_data_type_t  </RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_type</NAME>
<RETURNS>void  </RETURNS>
idmef_additional_data_t *ptr, idmef_additional_data_type_t type
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_type_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_type</NAME>
<RETURNS>idmef_additional_data_type_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_meaning</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_meaning</NAME>
<RETURNS>void  </RETURNS>
idmef_additional_data_t *ptr, idmef_string_t *meaning
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_meaning_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_meaning</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_data</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_data</NAME>
<RETURNS>void  </RETURNS>
idmef_additional_data_t *ptr, idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_data_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_data</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_classification_origin_t</NAME>
typedef enum {
        IDMEF_CLASSIFICATION_ORIGIN_ERROR = -1,
        IDMEF_CLASSIFICATION_ORIGIN_UNKNOWN = 0,
        IDMEF_CLASSIFICATION_ORIGIN_BUGTRAQID = 1,
        IDMEF_CLASSIFICATION_ORIGIN_CVE = 2,
        IDMEF_CLASSIFICATION_ORIGIN_VENDOR_SPECIFIC = 3,
        IDMEF_CLASSIFICATION_ORIGIN_OSVDB = 4,
} idmef_classification_origin_t;
</ENUM>
<FUNCTION>
<NAME>idmef_classification_origin_to_numeric</NAME>
<RETURNS>idmef_classification_origin_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_origin_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_classification_origin_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new</NAME>
<RETURNS>idmef_classification_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_ref</NAME>
<RETURNS>idmef_classification_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_origin</NAME>
<RETURNS>idmef_classification_origin_t  </RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_set_origin</NAME>
<RETURNS>void  </RETURNS>
idmef_classification_t *ptr, idmef_classification_origin_t origin
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_origin_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new_origin</NAME>
<RETURNS>idmef_classification_origin_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_classification_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_url</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_set_url</NAME>
<RETURNS>void  </RETURNS>
idmef_classification_t *ptr, idmef_string_t *url
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_url_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new_url</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_userid_type_t</NAME>
typedef enum {
        IDMEF_USERID_TYPE_ORIGINAL_ERROR = -1,
        IDMEF_USERID_TYPE_ORIGINAL_USER = 0,
        IDMEF_USERID_TYPE_CURRENT_USER = 1,
        IDMEF_USERID_TYPE_TARGET_USER = 2,
        IDMEF_USERID_TYPE_USER_PRIVS = 3,
        IDMEF_USERID_TYPE_CURRENT_GROUP = 4,
        IDMEF_USERID_TYPE_GROUP_PRIVS = 5,
        IDMEF_USERID_TYPE_OTHER_PRIVS = 6
} idmef_userid_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_userid_type_to_numeric</NAME>
<RETURNS>idmef_userid_type_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_type_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_userid_type_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_new</NAME>
<RETURNS>idmef_userid_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_ref</NAME>
<RETURNS>idmef_userid_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_userid_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_type</NAME>
<RETURNS>idmef_userid_type_t  </RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_set_type</NAME>
<RETURNS>void  </RETURNS>
idmef_userid_t *ptr, idmef_userid_type_t type
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_type_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_new_type</NAME>
<RETURNS>idmef_userid_type_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_userid_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_number</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_set_number</NAME>
<RETURNS>void  </RETURNS>
idmef_userid_t *ptr, uint32_t number
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_get_number_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_new_number</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_user_category_t</NAME>
typedef enum {
        IDMEF_USER_CATEGORY_ERROR = -1,
        IDMEF_USER_CATEGORY_UNKNOWN = 0,
        IDMEF_USER_CATEGORY_APPLICATION = 1,
        IDMEF_USER_CATEGORY_OS_DEVICE = 2
} idmef_user_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_user_category_to_numeric</NAME>
<RETURNS>idmef_user_category_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_category_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_user_category_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new</NAME>
<RETURNS>idmef_user_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_ref</NAME>
<RETURNS>idmef_user_t  *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_user_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_category</NAME>
<RETURNS>idmef_user_category_t  </RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_set_category</NAME>
<RETURNS>void  </RETURNS>
idmef_user_t *ptr, idmef_user_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_category_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new_category</NAME>
<RETURNS>idmef_user_category_t  *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_next_userid</NAME>
<RETURNS>idmef_userid_t  *</RETURNS>
idmef_user_t *ptr, idmef_userid_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_set_userid</NAME>
<RETURNS>void  </RETURNS>
idmef_user_t *ptr, idmef_userid_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new_userid</NAME>
<RETURNS>idmef_userid_t  *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_userid_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_address_category_t</NAME>
typedef enum {
        IDMEF_ADDRESS_CATEGORY_ERROR = -1,
        IDMEF_ADDRESS_CATEGORY_UNKNOWN = 0,
        IDMEF_ADDRESS_CATEGORY_ATM = 1,
        IDMEF_ADDRESS_CATEGORY_E_MAIL = 2,
        IDMEF_ADDRESS_CATEGORY_LOTUS_NOTES = 3,
        IDMEF_ADDRESS_CATEGORY_MAC = 4,
        IDMEF_ADDRESS_CATEGORY_SNA = 5,
        IDMEF_ADDRESS_CATEGORY_VM = 6,
        IDMEF_ADDRESS_CATEGORY_IPV4_ADDR = 7,
        IDMEF_ADDRESS_CATEGORY_IPV4_ADDR_HEX = 8,
        IDMEF_ADDRESS_CATEGORY_IPV4_NET = 9,
        IDMEF_ADDRESS_CATEGORY_IPV4_NET_MASK = 10,
        IDMEF_ADDRESS_CATEGORY_IPV6_ADDR = 11,
        IDMEF_ADDRESS_CATEGORY_IPV6_ADDR_HEX = 12,
        IDMEF_ADDRESS_CATEGORY_IPV6_NET = 13,
        IDMEF_ADDRESS_CATEGORY_IPV6_NET_MASK = 14,
} idmef_address_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_address_category_to_numeric</NAME>
<RETURNS>idmef_address_category_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_category_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_address_category_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new</NAME>
<RETURNS>idmef_address_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_ref</NAME>
<RETURNS>idmef_address_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_category</NAME>
<RETURNS>idmef_address_category_t  </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_category</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr, idmef_address_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_category_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_category</NAME>
<RETURNS>idmef_address_category_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_vlan_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_vlan_name</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr, idmef_string_t *vlan_name
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_vlan_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_vlan_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_vlan_num</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_vlan_num</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr, uint32_t vlan_num
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_vlan_num_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_vlan_num</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_address</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_address</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr, idmef_string_t *address
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_address_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_address</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_netmask</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_netmask</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr, idmef_string_t *netmask
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_netmask_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_netmask</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_ref</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_pid</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_pid</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr, uint32_t pid
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_pid_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_pid</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_path</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_path</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr, idmef_string_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_path_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_path</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_next_arg</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_arg</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_arg</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_arg_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_next_env</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_env</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_env</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_env_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_new</NAME>
<RETURNS>idmef_webservice_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_ref</NAME>
<RETURNS>idmef_webservice_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_url</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_set_url</NAME>
<RETURNS>void  </RETURNS>
idmef_webservice_t *ptr, idmef_string_t *url
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_url_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_new_url</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_cgi</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_set_cgi</NAME>
<RETURNS>void  </RETURNS>
idmef_webservice_t *ptr, idmef_string_t *cgi
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_cgi_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_new_cgi</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_http_method</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_set_http_method</NAME>
<RETURNS>void  </RETURNS>
idmef_webservice_t *ptr, idmef_string_t *http_method
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_http_method_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_new_http_method</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_next_arg</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_set_arg</NAME>
<RETURNS>void  </RETURNS>
idmef_webservice_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_new_arg</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_get_arg_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_new</NAME>
<RETURNS>idmef_snmpservice_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_ref</NAME>
<RETURNS>idmef_snmpservice_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_get_oid</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_set_oid</NAME>
<RETURNS>void  </RETURNS>
idmef_snmpservice_t *ptr, idmef_string_t *oid
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_get_oid_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_new_oid</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_get_community</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_set_community</NAME>
<RETURNS>void  </RETURNS>
idmef_snmpservice_t *ptr, idmef_string_t *community
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_get_community_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_new_community</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_get_command</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_set_command</NAME>
<RETURNS>void  </RETURNS>
idmef_snmpservice_t *ptr, idmef_string_t *command
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_get_command_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_new_command</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_service_type_t</NAME>
typedef enum {
        IDMEF_SERVICE_TYPE_ERROR = -1,
        IDMEF_SERVICE_TYPE_DEFAULT = 0,
        IDMEF_SERVICE_TYPE_WEB = 1,
        IDMEF_SERVICE_TYPE_SNMP = 2
} idmef_service_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_service_type_to_numeric</NAME>
<RETURNS>idmef_service_type_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_type_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_service_type_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new</NAME>
<RETURNS>idmef_service_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_ref</NAME>
<RETURNS>idmef_service_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_port</NAME>
<RETURNS>uint16_t  </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_port</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr, uint16_t port
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_port_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_port</NAME>
<RETURNS>uint16_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_portlist</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_portlist</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr, idmef_string_t *portlist
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_portlist_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_portlist</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_protocol</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_protocol</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr, idmef_string_t *protocol
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_protocol_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_protocol</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_type</NAME>
<RETURNS>idmef_service_type_t  </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_type_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_web</NAME>
<RETURNS>idmef_webservice_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_web</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr, idmef_webservice_t *web
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_web_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_web</NAME>
<RETURNS>idmef_webservice_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_snmp</NAME>
<RETURNS>idmef_snmpservice_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_snmp</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr, idmef_snmpservice_t *snmp
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_snmp_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_snmp</NAME>
<RETURNS>idmef_snmpservice_t  *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_node_category_t</NAME>
typedef enum {
        IDMEF_NODE_CATEGORY_ERROR = -1,
        IDMEF_NODE_CATEGORY_UNKNOWN = 0,
        IDMEF_NODE_CATEGORY_ADS = 1,
        IDMEF_NODE_CATEGORY_AFS = 2,
        IDMEF_NODE_CATEGORY_CODA = 3,
        IDMEF_NODE_CATEGORY_DFS = 4,
        IDMEF_NODE_CATEGORY_DNS = 5,
        IDMEF_NODE_CATEGORY_HOSTS = 6,
        IDMEF_NODE_CATEGORY_KERBEROS = 7,
        IDMEF_NODE_CATEGORY_NDS = 8,
        IDMEF_NODE_CATEGORY_NIS = 9,
        IDMEF_NODE_CATEGORY_NISPLUS = 10,
        IDMEF_NODE_CATEGORY_NT = 11,
        IDMEF_NODE_CATEGORY_WFW = 12
} idmef_node_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_node_category_to_numeric</NAME>
<RETURNS>idmef_node_category_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_category_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_node_category_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_ref</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_node_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_category</NAME>
<RETURNS>idmef_node_category_t  </RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_category</NAME>
<RETURNS>void  </RETURNS>
idmef_node_t *ptr, idmef_node_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_category_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_category</NAME>
<RETURNS>idmef_node_category_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_location</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_location</NAME>
<RETURNS>void  </RETURNS>
idmef_node_t *ptr, idmef_string_t *location
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_location_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_location</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_node_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_next_address</NAME>
<RETURNS>idmef_address_t  *</RETURNS>
idmef_node_t *ptr, idmef_address_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_address</NAME>
<RETURNS>void  </RETURNS>
idmef_node_t *ptr, idmef_address_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_address</NAME>
<RETURNS>idmef_address_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_address_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_source_spoofed_t</NAME>
typedef enum {
        IDMEF_SOURCE_SPOOFED_ERROR = -1,
        IDMEF_SOURCE_SPOOFED_UNKNOWN = 0,
        IDMEF_SOURCE_SPOOFED_YES = 1,
        IDMEF_SOURCE_SPOOFED_NO = 2
} idmef_source_spoofed_t;
</ENUM>
<FUNCTION>
<NAME>idmef_source_spoofed_to_numeric</NAME>
<RETURNS>idmef_source_spoofed_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_spoofed_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_source_spoofed_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new</NAME>
<RETURNS>idmef_source_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_ref</NAME>
<RETURNS>idmef_source_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_spoofed</NAME>
<RETURNS>idmef_source_spoofed_t  </RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_spoofed</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr, idmef_source_spoofed_t spoofed
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_spoofed_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_spoofed</NAME>
<RETURNS>idmef_source_spoofed_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_interface</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_interface</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr, idmef_string_t *interface
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_interface_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_interface</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_node</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_node</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_node_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_node</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_user</NAME>
<RETURNS>idmef_user_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_user</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr, idmef_user_t *user
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_user_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_user</NAME>
<RETURNS>idmef_user_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_process</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_process</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_process_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_process</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_service</NAME>
<RETURNS>idmef_service_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_service</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr, idmef_service_t *service
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_service_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_service</NAME>
<RETURNS>idmef_service_t  *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_new</NAME>
<RETURNS>idmef_file_access_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_ref</NAME>
<RETURNS>idmef_file_access_t  *</RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_get_userid</NAME>
<RETURNS>idmef_userid_t  *</RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_set_userid</NAME>
<RETURNS>void  </RETURNS>
idmef_file_access_t *ptr, idmef_userid_t *userid
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_get_userid_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_new_userid</NAME>
<RETURNS>idmef_userid_t  *</RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_get_next_permission</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_file_access_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_set_permission</NAME>
<RETURNS>void  </RETURNS>
idmef_file_access_t *ptr, idmef_string_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_new_permission</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_get_permission_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new</NAME>
<RETURNS>idmef_inode_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_ref</NAME>
<RETURNS>idmef_inode_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_change_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_change_time</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr, idmef_time_t *change_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_change_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_change_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_number</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_number</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr, uint32_t number
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_number_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_number</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_major_device</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_major_device</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr, uint32_t major_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_major_device_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_major_device</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_minor_device</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_minor_device</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr, uint32_t minor_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_minor_device_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_minor_device</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_c_major_device</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_c_major_device</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr, uint32_t c_major_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_c_major_device_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_c_major_device</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_c_minor_device</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_c_minor_device</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr, uint32_t c_minor_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_c_minor_device_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_c_minor_device</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_file_category_t</NAME>
typedef enum {
        IDMEF_FILE_CATEGORY_ERROR = -1,
        IDMEF_FILE_CATEGORY_CURRENT = 1,
        IDMEF_FILE_CATEGORY_ORIGINAL = 2
} idmef_file_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_file_category_to_numeric</NAME>
<RETURNS>idmef_file_category_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_category_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_file_category_t val
</FUNCTION>
<ENUM>
<NAME>idmef_file_fstype_t</NAME>
typedef enum {
        IDMEF_FILE_FSTYPE_ERROR = -1,
        IDMEF_FILE_FSTYPE_UFS = 1,
        IDMEF_FILE_FSTYPE_EFS = 2,
        IDMEF_FILE_FSTYPE_NFS = 3,
        IDMEF_FILE_FSTYPE_AFS = 4,
        IDMEF_FILE_FSTYPE_NTFS = 5,
        IDMEF_FILE_FSTYPE_FAT16 = 6,
        IDMEF_FILE_FSTYPE_FAT32 = 7,
        IDMEF_FILE_FSTYPE_PCFS = 8,
        IDMEF_FILE_FSTYPE_JOLIET = 9,
        IDMEF_FILE_FSTYPE_ISO9660 = 10,
} idmef_file_fstype_t;
</ENUM>
<FUNCTION>
<NAME>idmef_file_fstype_to_numeric</NAME>
<RETURNS>idmef_file_fstype_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_fstype_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_file_fstype_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new</NAME>
<RETURNS>idmef_file_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_ref</NAME>
<RETURNS>idmef_file_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_category</NAME>
<RETURNS>idmef_file_category_t  </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_category</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_file_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_category_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_category</NAME>
<RETURNS>idmef_file_category_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_fstype</NAME>
<RETURNS>idmef_file_fstype_t  </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_fstype</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_file_fstype_t fstype
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_fstype_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_fstype</NAME>
<RETURNS>idmef_file_fstype_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_path</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_path</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_string_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_path_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_path</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_create_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_create_time</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_time_t *create_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_create_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_create_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_modify_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_modify_time</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_time_t *modify_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_modify_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_modify_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_access_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_access_time</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_time_t *access_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_access_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_access_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_data_size</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_data_size</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, uint32_t data_size
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_data_size_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_data_size</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_disk_size</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_disk_size</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, uint32_t disk_size
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_disk_size_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_disk_size</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_next_file_access</NAME>
<RETURNS>idmef_file_access_t  *</RETURNS>
idmef_file_t *ptr, idmef_file_access_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_file_access</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_file_access_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_file_access</NAME>
<RETURNS>idmef_file_access_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_file_access_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_next_file_linkage</NAME>
<RETURNS>idmef_linkage_t  *</RETURNS>
idmef_file_t *ptr, idmef_linkage_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_file_linkage</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_linkage_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_file_linkage</NAME>
<RETURNS>idmef_linkage_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_file_linkage_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_inode</NAME>
<RETURNS>idmef_inode_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_inode</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr, idmef_inode_t *inode
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_inode_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_inode</NAME>
<RETURNS>idmef_inode_t  *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_linkage_category_t</NAME>
typedef enum {
        IDMEF_LINKAGE_CATEGORY_ERROR = -1,
        IDMEF_LINKAGE_CATEGORY_HARD_LINK = 1,
        IDMEF_LINKAGE_CATEGORY_MOUNT_POINT = 2,
        IDMEF_LINKAGE_CATEGORY_REPARSE_POINT = 3,
        IDMEF_LINKAGE_CATEGORY_SHORTCUT = 4,
        IDMEF_LINKAGE_CATEGORY_STREAM = 5,
        IDMEF_LINKAGE_CATEGORY_SYMBOLIC_LINK = 6
} idmef_linkage_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_linkage_category_to_numeric</NAME>
<RETURNS>idmef_linkage_category_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_category_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_linkage_category_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new</NAME>
<RETURNS>idmef_linkage_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_ref</NAME>
<RETURNS>idmef_linkage_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_category</NAME>
<RETURNS>idmef_linkage_category_t  </RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_category</NAME>
<RETURNS>void  </RETURNS>
idmef_linkage_t *ptr, idmef_linkage_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_category_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_category</NAME>
<RETURNS>idmef_linkage_category_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_linkage_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_path</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_path</NAME>
<RETURNS>void  </RETURNS>
idmef_linkage_t *ptr, idmef_string_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_path_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_path</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_file</NAME>
<RETURNS>idmef_file_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_file</NAME>
<RETURNS>void  </RETURNS>
idmef_linkage_t *ptr, idmef_file_t *file
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_file_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_file</NAME>
<RETURNS>idmef_file_t  *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_target_decoy_t</NAME>
typedef enum {
        IDMEF_TARGET_DECOY_ERROR = -1,
        IDMEF_TARGET_DECOY_UNKNOWN = 0,
        IDMEF_TARGET_DECOY_YES = 1,
        IDMEF_TARGET_DECOY_NO = 2
} idmef_target_decoy_t;
</ENUM>
<FUNCTION>
<NAME>idmef_target_decoy_to_numeric</NAME>
<RETURNS>idmef_target_decoy_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_decoy_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_target_decoy_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new</NAME>
<RETURNS>idmef_target_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_ref</NAME>
<RETURNS>idmef_target_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_decoy</NAME>
<RETURNS>idmef_target_decoy_t  </RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_decoy</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, idmef_target_decoy_t decoy
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_decoy_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_decoy</NAME>
<RETURNS>idmef_target_decoy_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_interface</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_interface</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, idmef_string_t *interface
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_interface_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_interface</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_node</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_node</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_node_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_node</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_user</NAME>
<RETURNS>idmef_user_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_user</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, idmef_user_t *user
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_user_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_user</NAME>
<RETURNS>idmef_user_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_process</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_process</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_process_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_process</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_service</NAME>
<RETURNS>idmef_service_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_service</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, idmef_service_t *service
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_service_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_service</NAME>
<RETURNS>idmef_service_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_next_file</NAME>
<RETURNS>idmef_file_t  *</RETURNS>
idmef_target_t *ptr, idmef_file_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_file</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr, idmef_file_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_file</NAME>
<RETURNS>idmef_file_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_file_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_ref</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_analyzerid</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_analyzerid</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, uint64_t analyzerid
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_analyzerid_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_analyzerid</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_manufacturer</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_manufacturer</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_string_t *manufacturer
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_manufacturer_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_manufacturer</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_model</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_model</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_string_t *model
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_model_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_model</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_version</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_version</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_string_t *version
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_version_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_version</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_class</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_class</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_string_t *class
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_class_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_class</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_ostype</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_ostype</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_string_t *ostype
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_ostype_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_ostype</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_osversion</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_osversion</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_string_t *osversion
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_osversion_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_osversion</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_node</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_node</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_node_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_node</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_process</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_process</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_process_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_process</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_analyzer</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr, idmef_analyzer_t *analyzer
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_analyzer_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_new</NAME>
<RETURNS>idmef_alertident_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_ref</NAME>
<RETURNS>idmef_alertident_t  *</RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_get_alertident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_set_alertident</NAME>
<RETURNS>void  </RETURNS>
idmef_alertident_t *ptr, uint64_t alertident
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_get_alertident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_new_alertident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_get_analyzerid</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_set_analyzerid</NAME>
<RETURNS>void  </RETURNS>
idmef_alertident_t *ptr, uint64_t analyzerid
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_get_analyzerid_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_new_analyzerid</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_impact_severity_t</NAME>
typedef enum {
        IDMEF_IMPACT_SEVERITY_ERROR = -1,
        IDMEF_IMPACT_SEVERITY_LOW = 1,
        IDMEF_IMPACT_SEVERITY_MEDIUM = 2,
        IDMEF_IMPACT_SEVERITY_HIGH = 3,
        IDMEF_IMPACT_SEVERITY_INFO = 4,
} idmef_impact_severity_t;
</ENUM>
<FUNCTION>
<NAME>idmef_impact_severity_to_numeric</NAME>
<RETURNS>idmef_impact_severity_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_severity_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_impact_severity_t val
</FUNCTION>
<ENUM>
<NAME>idmef_impact_completion_t</NAME>
typedef enum {
        IDMEF_IMPACT_COMPLETION_ERROR = -1,
        IDMEF_IMPACT_COMPLETION_FAILED = 1,
        IDMEF_IMPACT_COMPLETION_SUCCEEDED = 2
} idmef_impact_completion_t;
</ENUM>
<FUNCTION>
<NAME>idmef_impact_completion_to_numeric</NAME>
<RETURNS>idmef_impact_completion_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_completion_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_impact_completion_t val
</FUNCTION>
<ENUM>
<NAME>idmef_impact_type_t</NAME>
typedef enum {
        IDMEF_IMPACT_TYPE_ERROR = -1,
        IDMEF_IMPACT_TYPE_OTHER = 0,
        IDMEF_IMPACT_TYPE_ADMIN = 1,
        IDMEF_IMPACT_TYPE_DOS = 2,
        IDMEF_IMPACT_TYPE_FILE = 3,
        IDMEF_IMPACT_TYPE_RECON = 4,
        IDMEF_IMPACT_TYPE_USER = 5
} idmef_impact_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_impact_type_to_numeric</NAME>
<RETURNS>idmef_impact_type_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_type_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_impact_type_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new</NAME>
<RETURNS>idmef_impact_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_ref</NAME>
<RETURNS>idmef_impact_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_severity</NAME>
<RETURNS>idmef_impact_severity_t  </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_severity</NAME>
<RETURNS>void  </RETURNS>
idmef_impact_t *ptr, idmef_impact_severity_t severity
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_severity_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_severity</NAME>
<RETURNS>idmef_impact_severity_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_completion</NAME>
<RETURNS>idmef_impact_completion_t  </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_completion</NAME>
<RETURNS>void  </RETURNS>
idmef_impact_t *ptr, idmef_impact_completion_t completion
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_completion_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_completion</NAME>
<RETURNS>idmef_impact_completion_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_type</NAME>
<RETURNS>idmef_impact_type_t  </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_type</NAME>
<RETURNS>void  </RETURNS>
idmef_impact_t *ptr, idmef_impact_type_t type
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_type_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_type</NAME>
<RETURNS>idmef_impact_type_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_description</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_description</NAME>
<RETURNS>void  </RETURNS>
idmef_impact_t *ptr, idmef_string_t *description
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_description_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_description</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_action_category_t</NAME>
typedef enum {
        IDMEF_ACTION_CATEGORY_ERROR = -1,
        IDMEF_ACTION_CATEGORY_OTHER = 0,
        IDMEF_ACTION_CATEGORY_BLOCK_INSTALLED = 1,
        IDMEF_ACTION_CATEGORY_NOTIFICATION_SENT = 2,
        IDMEF_ACTION_CATEGORY_TAKEN_OFFLINE = 3
} idmef_action_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_action_category_to_numeric</NAME>
<RETURNS>idmef_action_category_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_category_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_action_category_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_new</NAME>
<RETURNS>idmef_action_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_ref</NAME>
<RETURNS>idmef_action_t  *</RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_get_category</NAME>
<RETURNS>idmef_action_category_t  </RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_set_category</NAME>
<RETURNS>void  </RETURNS>
idmef_action_t *ptr, idmef_action_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_get_category_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_new_category</NAME>
<RETURNS>idmef_action_category_t  *</RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_get_description</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_set_description</NAME>
<RETURNS>void  </RETURNS>
idmef_action_t *ptr, idmef_string_t *description
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_get_description_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_new_description</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_action_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_confidence_rating_t</NAME>
typedef enum {
        IDMEF_CONFIDENCE_RATING_ERROR = -1,
        IDMEF_CONFIDENCE_RATING_NUMERIC = 0,
        IDMEF_CONFIDENCE_RATING_LOW = 1,
        IDMEF_CONFIDENCE_RATING_MEDIUM = 2,
        IDMEF_CONFIDENCE_RATING_HIGH = 3
} idmef_confidence_rating_t;
</ENUM>
<FUNCTION>
<NAME>idmef_confidence_rating_to_numeric</NAME>
<RETURNS>idmef_confidence_rating_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_rating_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_confidence_rating_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_new</NAME>
<RETURNS>idmef_confidence_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_ref</NAME>
<RETURNS>idmef_confidence_t  *</RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_get_rating</NAME>
<RETURNS>idmef_confidence_rating_t  </RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_set_rating</NAME>
<RETURNS>void  </RETURNS>
idmef_confidence_t *ptr, idmef_confidence_rating_t rating
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_get_rating_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_new_rating</NAME>
<RETURNS>idmef_confidence_rating_t  *</RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_get_confidence</NAME>
<RETURNS>float  </RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_set_confidence</NAME>
<RETURNS>void  </RETURNS>
idmef_confidence_t *ptr, float confidence
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_get_confidence_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_new_confidence</NAME>
<RETURNS>float  *</RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new</NAME>
<RETURNS>idmef_assessment_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_ref</NAME>
<RETURNS>idmef_assessment_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_impact</NAME>
<RETURNS>idmef_impact_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_set_impact</NAME>
<RETURNS>void  </RETURNS>
idmef_assessment_t *ptr, idmef_impact_t *impact
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_impact_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new_impact</NAME>
<RETURNS>idmef_impact_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_next_action</NAME>
<RETURNS>idmef_action_t  *</RETURNS>
idmef_assessment_t *ptr, idmef_action_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_set_action</NAME>
<RETURNS>void  </RETURNS>
idmef_assessment_t *ptr, idmef_action_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new_action</NAME>
<RETURNS>idmef_action_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_action_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_confidence</NAME>
<RETURNS>idmef_confidence_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_set_confidence</NAME>
<RETURNS>void  </RETURNS>
idmef_assessment_t *ptr, idmef_confidence_t *confidence
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_confidence_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new_confidence</NAME>
<RETURNS>idmef_confidence_t  *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new</NAME>
<RETURNS>idmef_tool_alert_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_ref</NAME>
<RETURNS>idmef_tool_alert_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_tool_alert_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_command</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_set_command</NAME>
<RETURNS>void  </RETURNS>
idmef_tool_alert_t *ptr, idmef_string_t *command
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_command_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new_command</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_next_alertident</NAME>
<RETURNS>idmef_alertident_t  *</RETURNS>
idmef_tool_alert_t *ptr, idmef_alertident_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_set_alertident</NAME>
<RETURNS>void  </RETURNS>
idmef_tool_alert_t *ptr, idmef_alertident_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new_alertident</NAME>
<RETURNS>idmef_alertident_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_alertident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_new</NAME>
<RETURNS>idmef_correlation_alert_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_ref</NAME>
<RETURNS>idmef_correlation_alert_t  *</RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_get_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_set_name</NAME>
<RETURNS>void  </RETURNS>
idmef_correlation_alert_t *ptr, idmef_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_get_name_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_new_name</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_get_next_alertident</NAME>
<RETURNS>idmef_alertident_t  *</RETURNS>
idmef_correlation_alert_t *ptr, idmef_alertident_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_set_alertident</NAME>
<RETURNS>void  </RETURNS>
idmef_correlation_alert_t *ptr, idmef_alertident_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_new_alertident</NAME>
<RETURNS>idmef_alertident_t  *</RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_get_alertident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new</NAME>
<RETURNS>idmef_overflow_alert_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_ref</NAME>
<RETURNS>idmef_overflow_alert_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_program</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_set_program</NAME>
<RETURNS>void  </RETURNS>
idmef_overflow_alert_t *ptr, idmef_string_t *program
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_program_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new_program</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_size</NAME>
<RETURNS>uint32_t  </RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_set_size</NAME>
<RETURNS>void  </RETURNS>
idmef_overflow_alert_t *ptr, uint32_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_size_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new_size</NAME>
<RETURNS>uint32_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_buffer</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_set_buffer</NAME>
<RETURNS>void  </RETURNS>
idmef_overflow_alert_t *ptr, idmef_data_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_buffer_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new_buffer</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_alert_type_t</NAME>
typedef enum {
        IDMEF_ALERT_TYPE_ERROR = -1,
        IDMEF_ALERT_TYPE_DEFAULT = 0,
        IDMEF_ALERT_TYPE_TOOL = 1,
        IDMEF_ALERT_TYPE_CORRELATION = 2,
        IDMEF_ALERT_TYPE_OVERFLOW = 3
} idmef_alert_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_alert_type_to_numeric</NAME>
<RETURNS>idmef_alert_type_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_type_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_alert_type_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new</NAME>
<RETURNS>idmef_alert_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_assessment</NAME>
<RETURNS>idmef_assessment_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_assessment</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_assessment_t *assessment
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_assessment_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_assessment</NAME>
<RETURNS>idmef_assessment_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_analyzer</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_analyzer_t *analyzer
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_analyzer_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_create_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_create_time</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_time_t *create_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_create_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_create_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_detect_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_detect_time</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_time_t *detect_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_detect_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_detect_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_analyzer_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_analyzer_time</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_time_t *analyzer_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_analyzer_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_analyzer_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_source</NAME>
<RETURNS>idmef_source_t  *</RETURNS>
idmef_alert_t *ptr, idmef_source_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_source</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_source_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_source</NAME>
<RETURNS>idmef_source_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_source_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_target</NAME>
<RETURNS>idmef_target_t  *</RETURNS>
idmef_alert_t *ptr, idmef_target_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_target</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_target_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_target</NAME>
<RETURNS>idmef_target_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_target_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_classification</NAME>
<RETURNS>idmef_classification_t  *</RETURNS>
idmef_alert_t *ptr, idmef_classification_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_classification</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_classification_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_classification</NAME>
<RETURNS>idmef_classification_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_classification_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_additional_data</NAME>
<RETURNS>idmef_additional_data_t  *</RETURNS>
idmef_alert_t *ptr, idmef_additional_data_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_additional_data</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_additional_data_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_additional_data</NAME>
<RETURNS>idmef_additional_data_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_additional_data_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_type</NAME>
<RETURNS>idmef_alert_type_t  </RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_type_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_tool_alert</NAME>
<RETURNS>idmef_tool_alert_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_tool_alert</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_tool_alert_t *tool_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_tool_alert_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_tool_alert</NAME>
<RETURNS>idmef_tool_alert_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_correlation_alert</NAME>
<RETURNS>idmef_correlation_alert_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_correlation_alert</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_correlation_alert_t *correlation_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_correlation_alert_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_correlation_alert</NAME>
<RETURNS>idmef_correlation_alert_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_overflow_alert</NAME>
<RETURNS>idmef_overflow_alert_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_overflow_alert</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr, idmef_overflow_alert_t *overflow_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_overflow_alert_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_overflow_alert</NAME>
<RETURNS>idmef_overflow_alert_t  *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new</NAME>
<RETURNS>idmef_heartbeat_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_ident</NAME>
<RETURNS>uint64_t  </RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_ident</NAME>
<RETURNS>void  </RETURNS>
idmef_heartbeat_t *ptr, uint64_t ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_ident_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_ident</NAME>
<RETURNS>uint64_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_analyzer</NAME>
<RETURNS>void  </RETURNS>
idmef_heartbeat_t *ptr, idmef_analyzer_t *analyzer
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_analyzer_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_create_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_create_time</NAME>
<RETURNS>void  </RETURNS>
idmef_heartbeat_t *ptr, idmef_time_t *create_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_create_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_create_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_analyzer_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_analyzer_time</NAME>
<RETURNS>void  </RETURNS>
idmef_heartbeat_t *ptr, idmef_time_t *analyzer_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_analyzer_time_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_analyzer_time</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_next_additional_data</NAME>
<RETURNS>idmef_additional_data_t  *</RETURNS>
idmef_heartbeat_t *ptr, idmef_additional_data_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_additional_data</NAME>
<RETURNS>void  </RETURNS>
idmef_heartbeat_t *ptr, idmef_additional_data_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_additional_data</NAME>
<RETURNS>idmef_additional_data_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_additional_data_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<ENUM>
<NAME>idmef_message_type_t</NAME>
typedef enum {
        IDMEF_MESSAGE_TYPE_ERROR = -1,
        IDMEF_MESSAGE_TYPE_ALERT = 1,
        IDMEF_MESSAGE_TYPE_HEARTBEAT = 2
} idmef_message_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_message_type_to_numeric</NAME>
<RETURNS>idmef_message_type_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_type_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_message_type_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new</NAME>
<RETURNS>idmef_message_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_ref</NAME>
<RETURNS>idmef_message_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *p, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_version</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_version</NAME>
<RETURNS>void  </RETURNS>
idmef_message_t *ptr, idmef_string_t *version
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_version_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new_version</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_type</NAME>
<RETURNS>idmef_message_type_t  </RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_type_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_alert</NAME>
<RETURNS>idmef_alert_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_alert</NAME>
<RETURNS>void  </RETURNS>
idmef_message_t *ptr, idmef_alert_t *alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_alert_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new_alert</NAME>
<RETURNS>idmef_alert_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_heartbeat</NAME>
<RETURNS>idmef_heartbeat_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_heartbeat</NAME>
<RETURNS>void  </RETURNS>
idmef_message_t *ptr, idmef_heartbeat_t *heartbeat
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_heartbeat_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new_heartbeat</NAME>
<RETURNS>idmef_heartbeat_t  *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_pmsg</NAME>
<RETURNS>void  </RETURNS>
idmef_message_t *message, prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_pmsg</NAME>
<RETURNS>prelude_msg_t  *</RETURNS>
idmef_message_t *message
</FUNCTION>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ADDITIONAL_DATA_TYPE</NAME>
#define IDMEF_OBJECT_TYPE_ADDITIONAL_DATA_TYPE 3
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ADDITIONAL_DATA</NAME>
#define IDMEF_OBJECT_TYPE_ADDITIONAL_DATA 4
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_CLASSIFICATION_ORIGIN</NAME>
#define IDMEF_OBJECT_TYPE_CLASSIFICATION_ORIGIN 5
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_CLASSIFICATION</NAME>
#define IDMEF_OBJECT_TYPE_CLASSIFICATION 6
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_USERID_TYPE</NAME>
#define IDMEF_OBJECT_TYPE_USERID_TYPE 7
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_USERID</NAME>
#define IDMEF_OBJECT_TYPE_USERID 8
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_USER_CATEGORY</NAME>
#define IDMEF_OBJECT_TYPE_USER_CATEGORY 9
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_USER</NAME>
#define IDMEF_OBJECT_TYPE_USER 10
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ADDRESS_CATEGORY</NAME>
#define IDMEF_OBJECT_TYPE_ADDRESS_CATEGORY 11
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ADDRESS</NAME>
#define IDMEF_OBJECT_TYPE_ADDRESS 12
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_PROCESS</NAME>
#define IDMEF_OBJECT_TYPE_PROCESS 13
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_WEBSERVICE</NAME>
#define IDMEF_OBJECT_TYPE_WEBSERVICE 14
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_SNMPSERVICE</NAME>
#define IDMEF_OBJECT_TYPE_SNMPSERVICE 15
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_SERVICE_TYPE</NAME>
#define IDMEF_OBJECT_TYPE_SERVICE_TYPE 16
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_SERVICE</NAME>
#define IDMEF_OBJECT_TYPE_SERVICE 17
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_NODE_CATEGORY</NAME>
#define IDMEF_OBJECT_TYPE_NODE_CATEGORY 18
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_NODE</NAME>
#define IDMEF_OBJECT_TYPE_NODE 19
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_SOURCE_SPOOFED</NAME>
#define IDMEF_OBJECT_TYPE_SOURCE_SPOOFED 20
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_SOURCE</NAME>
#define IDMEF_OBJECT_TYPE_SOURCE 21
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_FILE_ACCESS</NAME>
#define IDMEF_OBJECT_TYPE_FILE_ACCESS 22
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_INODE</NAME>
#define IDMEF_OBJECT_TYPE_INODE 23
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_FILE_CATEGORY</NAME>
#define IDMEF_OBJECT_TYPE_FILE_CATEGORY 24
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_FILE_FSTYPE</NAME>
#define IDMEF_OBJECT_TYPE_FILE_FSTYPE 25
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_FILE</NAME>
#define IDMEF_OBJECT_TYPE_FILE 26
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_LINKAGE_CATEGORY</NAME>
#define IDMEF_OBJECT_TYPE_LINKAGE_CATEGORY 27
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_LINKAGE</NAME>
#define IDMEF_OBJECT_TYPE_LINKAGE 28
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_TARGET_DECOY</NAME>
#define IDMEF_OBJECT_TYPE_TARGET_DECOY 29
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_TARGET</NAME>
#define IDMEF_OBJECT_TYPE_TARGET 30
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ANALYZER</NAME>
#define IDMEF_OBJECT_TYPE_ANALYZER 31
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ALERTIDENT</NAME>
#define IDMEF_OBJECT_TYPE_ALERTIDENT 32
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_IMPACT_SEVERITY</NAME>
#define IDMEF_OBJECT_TYPE_IMPACT_SEVERITY 33
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_IMPACT_COMPLETION</NAME>
#define IDMEF_OBJECT_TYPE_IMPACT_COMPLETION 34
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_IMPACT_TYPE</NAME>
#define IDMEF_OBJECT_TYPE_IMPACT_TYPE 35
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_IMPACT</NAME>
#define IDMEF_OBJECT_TYPE_IMPACT 36
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ACTION_CATEGORY</NAME>
#define IDMEF_OBJECT_TYPE_ACTION_CATEGORY 37
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ACTION</NAME>
#define IDMEF_OBJECT_TYPE_ACTION 38
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_CONFIDENCE_RATING</NAME>
#define IDMEF_OBJECT_TYPE_CONFIDENCE_RATING 39
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_CONFIDENCE</NAME>
#define IDMEF_OBJECT_TYPE_CONFIDENCE 40
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ASSESSMENT</NAME>
#define IDMEF_OBJECT_TYPE_ASSESSMENT 41
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_TOOL_ALERT</NAME>
#define IDMEF_OBJECT_TYPE_TOOL_ALERT 42
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_CORRELATION_ALERT</NAME>
#define IDMEF_OBJECT_TYPE_CORRELATION_ALERT 43
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_OVERFLOW_ALERT</NAME>
#define IDMEF_OBJECT_TYPE_OVERFLOW_ALERT 44
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ALERT_TYPE</NAME>
#define IDMEF_OBJECT_TYPE_ALERT_TYPE 45
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_ALERT</NAME>
#define IDMEF_OBJECT_TYPE_ALERT 46
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_HEARTBEAT</NAME>
#define IDMEF_OBJECT_TYPE_HEARTBEAT 47
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_MESSAGE_TYPE</NAME>
#define IDMEF_OBJECT_TYPE_MESSAGE_TYPE 48
</MACRO>
<MACRO>
<NAME>IDMEF_OBJECT_TYPE_MESSAGE</NAME>
#define IDMEF_OBJECT_TYPE_MESSAGE 49
</MACRO>
<FUNCTION>
<NAME>prelude_io_new</NAME>
<RETURNS>prelude_io_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_set_file_io</NAME>
<RETURNS>void  </RETURNS>
prelude_io_t *pio, FILE *fd
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_set_tls_io</NAME>
<RETURNS>void  </RETURNS>
prelude_io_t *pio, void *tls
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_set_sys_io</NAME>
<RETURNS>void  </RETURNS>
prelude_io_t *pio, int fd
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_close</NAME>
<RETURNS>int  </RETURNS>
prelude_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_read</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_io_t *pio, void *buf, size_t count
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_read_wait</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_io_t *pio, void *buf, size_t count
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_read_delimited</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_io_t *pio, unsigned char **buf
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_write</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_io_t *pio, const void *buf, size_t count
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_write_delimited</NAME>
<RETURNS>int  </RETURNS>
prelude_io_t *pio, const void *buf, uint16_t count
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_forward</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_io_t *dst, prelude_io_t *src, size_t count
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_get_fd</NAME>
<RETURNS>int  </RETURNS>
prelude_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_get_fdptr</NAME>
<RETURNS>void  *</RETURNS>
prelude_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>prelude_io_pending</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>variable_set</NAME>
<RETURNS>int  </RETURNS>
char *variable, char *value
</FUNCTION>
<FUNCTION>
<NAME>variable_unset</NAME>
<RETURNS>int  </RETURNS>
const char *variable
</FUNCTION>
<FUNCTION>
<NAME>variable_get</NAME>
<RETURNS>char  *</RETURNS>
const char *variable
</FUNCTION>
<MACRO>
<NAME>PRELUDE_MSG_IDMEF</NAME>
#define PRELUDE_MSG_IDMEF          0
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_ID</NAME>
#define PRELUDE_MSG_ID             3
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_AUTH</NAME>
#define PRELUDE_MSG_AUTH           4
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_CM</NAME>
#define PRELUDE_MSG_CM             5 
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_CLIENT_CAPABILITY</NAME>
#define PRELUDE_MSG_CLIENT_CAPABILITY    6
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_REQUEST</NAME>
#define PRELUDE_MSG_OPTION_REQUEST 7
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_REPLY</NAME>
#define PRELUDE_MSG_OPTION_REPLY   8
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_ID_DECLARE</NAME>
#define PRELUDE_MSG_ID_DECLARE  0
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_AUTH_SUCCEED</NAME>
#define PRELUDE_MSG_AUTH_SUCCEED   6
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_AUTH_FAILED</NAME>
#define PRELUDE_MSG_AUTH_FAILED    7
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_CM_FIREWALL</NAME>
#define PRELUDE_MSG_CM_FIREWALL 0
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_CM_THROTTLE</NAME>
#define PRELUDE_MSG_CM_THROTTLE 1
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_CM_ISLAND</NAME>
#define PRELUDE_MSG_CM_ISLAND   2
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_CM_FEATURE</NAME>
#define PRELUDE_MSG_CM_FEATURE  3
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_TARGET_ID</NAME>
#define PRELUDE_MSG_OPTION_TARGET_ID        0
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_SOURCE_ID</NAME>
#define PRELUDE_MSG_OPTION_SOURCE_ID        1
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_LIST</NAME>
#define PRELUDE_MSG_OPTION_LIST             2
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_VALUE</NAME>
#define PRELUDE_MSG_OPTION_VALUE            3
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_SET</NAME>
#define PRELUDE_MSG_OPTION_SET              4
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_GET</NAME>
#define PRELUDE_MSG_OPTION_GET              5
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_ID</NAME>
#define PRELUDE_MSG_OPTION_ID               6
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_ERROR</NAME>
#define PRELUDE_MSG_OPTION_ERROR            7
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_START</NAME>
#define PRELUDE_MSG_OPTION_START            8
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_END</NAME>
#define PRELUDE_MSG_OPTION_END              9
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_NAME</NAME>
#define PRELUDE_MSG_OPTION_NAME            10
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_DESC</NAME>
#define PRELUDE_MSG_OPTION_DESC            11
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_HAS_ARG</NAME>
#define PRELUDE_MSG_OPTION_HAS_ARG         12
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_HELP</NAME>
#define PRELUDE_MSG_OPTION_HELP            13
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_INPUT_VALIDATION</NAME>
#define PRELUDE_MSG_OPTION_INPUT_VALIDATION 14
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_INPUT_TYPE</NAME>
#define PRELUDE_MSG_OPTION_INPUT_TYPE       15
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_ARG</NAME>
#define PRELUDE_MSG_OPTION_ARG              16
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_FLAGS</NAME>
#define PRELUDE_MSG_OPTION_FLAGS            17
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_DESTROY</NAME>
#define PRELUDE_MSG_OPTION_DESTROY          18
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_OPTION_COMMIT</NAME>
#define PRELUDE_MSG_OPTION_COMMIT           19
</MACRO>
<FUNCTION>
<NAME>idmef_additional_data_print</NAME>
<RETURNS>void  </RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_print</NAME>
<RETURNS>void  </RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_print</NAME>
<RETURNS>void  </RETURNS>
idmef_userid_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_print</NAME>
<RETURNS>void  </RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_print</NAME>
<RETURNS>void  </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_print</NAME>
<RETURNS>void  </RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_print</NAME>
<RETURNS>void  </RETURNS>
idmef_webservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_print</NAME>
<RETURNS>void  </RETURNS>
idmef_snmpservice_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_print</NAME>
<RETURNS>void  </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_print</NAME>
<RETURNS>void  </RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_print</NAME>
<RETURNS>void  </RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_print</NAME>
<RETURNS>void  </RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_print</NAME>
<RETURNS>void  </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_print</NAME>
<RETURNS>void  </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_print</NAME>
<RETURNS>void  </RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_print</NAME>
<RETURNS>void  </RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_print</NAME>
<RETURNS>void  </RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_print</NAME>
<RETURNS>void  </RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_print</NAME>
<RETURNS>void  </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_print</NAME>
<RETURNS>void  </RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_print</NAME>
<RETURNS>void  </RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_print</NAME>
<RETURNS>void  </RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_print</NAME>
<RETURNS>void  </RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_print</NAME>
<RETURNS>void  </RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_print</NAME>
<RETURNS>void  </RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_print</NAME>
<RETURNS>void  </RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_print</NAME>
<RETURNS>void  </RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_print</NAME>
<RETURNS>void  </RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>prelude_log_use_syslog</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>prelude_log_get_prefix</NAME>
<RETURNS>char  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>prelude_log_set_prefix</NAME>
<RETURNS>void  </RETURNS>
char *prefix
</FUNCTION>
<FUNCTION>
<NAME>prelude_log</NAME>
<RETURNS>void  </RETURNS>
int priority, const char *file, const char *function, int line, const char *fmt, ...
</FUNCTION>
<MACRO>
<NAME>log</NAME>
#define log(priority, ...) \
        prelude_log(priority, __FILE__, __FUNCTION__, __LINE__, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>do_init</NAME>
#define do_init(func, name) do {                         \
        char *old_prefix = prelude_log_get_prefix();     \
        prelude_log_set_prefix(NULL);                    \
        log(LOG_INFO, "- %s\n", name);                   \
        prelude_log_set_prefix(old_prefix);              \
        if ( (func) < 0 )                                \
                exit(1);                                 \
        prelude_log_set_prefix(old_prefix);              \
} while(0);
</MACRO>
<MACRO>
<NAME>do_init_nofail</NAME>
#define do_init_nofail(func, name) do {                  \
        char *old_prefix = prelude_log_get_prefix();     \
        prelude_log_set_prefix(NULL);                    \
        log(LOG_INFO, "- %s\n", name);                   \
        prelude_log_set_prefix(old_prefix);              \
        (func);                                          \
} while(0);
</MACRO>
<FUNCTION>
<NAME>idmef_criteria_new_string</NAME>
<RETURNS>idmef_criteria_t  *</RETURNS>
const char *str
</FUNCTION>
<MACRO>
<NAME>TS_MASK</NAME>
#define TS_MASK         0xfffff000      /* mask to usec, for time stamps */
</MACRO>
<MACRO>
<NAME>TS_ROUNDBIT</NAME>
#define TS_ROUNDBIT     0x00000800      /* round at this bit */
</MACRO>
<MACRO>
<NAME>JAN_1970</NAME>
#define	JAN_1970	0x83aa7e80	/* 2208988800 1970 - 1900 in seconds */
</MACRO>
<TYPEDEF>
<NAME>s_fp</NAME>
typedef int32_t s_fp;
</TYPEDEF>
<STRUCT>
<NAME>l_fp</NAME>
struct l_fp
{
        union {
                uint32_t Xl_ui;
                int32_t Xl_i;
        } Ul_i;
        union {
                uint32_t Xl_uf;
                int32_t Xl_f;
        } Ul_f;
};
</STRUCT>
<MACRO>
<NAME>l_ui</NAME>
#define l_ui    Ul_i.Xl_ui              /* unsigned integral part */
</MACRO>
<MACRO>
<NAME>l_i</NAME>
#define l_i     Ul_i.Xl_i               /* signed integral part */
</MACRO>
<MACRO>
<NAME>l_uf</NAME>
#define l_uf    Ul_f.Xl_uf              /* unsigned fractional part */
</MACRO>
<MACRO>
<NAME>l_f</NAME>
#define l_f     Ul_f.Xl_f               /* signed fractional part */
</MACRO>
<MACRO>
<NAME>M_NEG</NAME>
#define M_NEG(v_i, v_f)         /* v = -v */ \
        do { \
                if ((v_f) == 0) \
                        (v_i) = -((s_fp)(v_i)); \
                else { \
                        (v_f) = -((s_fp)(v_f)); \
                        (v_i) = ~(v_i); \
                } \
        } while(0)
</MACRO>
<MACRO>
<NAME>L_NEG</NAME>
#define L_NEG(v)        M_NEG((v)->l_ui, (v)->l_uf)
</MACRO>
<MACRO>
<NAME>TVUTOTSF</NAME>
#define TVUTOTSF(tvu, tsf) \
        (tsf) = ustotslo[(tvu) & 0xff] \
            + ustotsmid[((tvu) >> 8) & 0xff] \
            + ustotshi[((tvu) >> 16) & 0xf]
</MACRO>
<MACRO>
<NAME>sTVTOTS</NAME>
#define sTVTOTS(tv, ts) \
        do { \
                int isneg = 0; \
                long usec; \
                (ts)->l_ui = (tv)->tv_sec; \
                usec = (tv)->tv_usec; \
                if (((tv)->tv_sec < 0) || ((tv)->tv_usec < 0)) { \
                        usec = -usec; \
                        (ts)->l_ui = -(ts)->l_ui; \
                        isneg = 1; \
                } \
                TVUTOTSF(usec, (ts)->l_uf); \
                if (isneg) { \
                        L_NEG((ts)); \
                } \
        } while(0)
</MACRO>
<MACRO>
<NAME>TV_SHIFT</NAME>
#define TV_SHIFT        3
</MACRO>
<MACRO>
<NAME>TV_ROUNDBIT</NAME>
#define TV_ROUNDBIT     0x4
</MACRO>
<MACRO>
<NAME>TSFTOTVU</NAME>
#define TSFTOTVU(tsf, tvu) \
        (tvu) = (tstoushi[((tsf) >> 24) & 0xff] \
            + tstousmid[((tsf) >> 16) & 0xff] \
            + tstouslo[((tsf) >> 9) & 0x7f] \
            + TV_ROUNDBIT) >> TV_SHIFT
</MACRO>
<MACRO>
<NAME>TSTOTV</NAME>
#define TSTOTV(ts, tv) \
        do { \
                (tv)->tv_sec = (ts)->l_ui; \
                TSFTOTVU((ts)->l_uf, (tv)->tv_usec); \
                if ((tv)->tv_usec == 1000000) { \
                        (tv)->tv_sec++; \
                        (tv)->tv_usec = 0; \
                } \
        } while (0)
</MACRO>
<MACRO>
<NAME>PRELUDE_CONNECTION_ESTABLISHED</NAME>
#define PRELUDE_CONNECTION_ESTABLISHED    0x01
</MACRO>
<MACRO>
<NAME>PRELUDE_CONNECTION_OWN_FD</NAME>
#define PRELUDE_CONNECTION_OWN_FD         0x02
</MACRO>
<FUNCTION>
<NAME>prelude_connection_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_send_msg</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_t *cnx, prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_connect</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_forward</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_connection_t *cnx, prelude_io_t *src, size_t count
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_saddr</NAME>
<RETURNS>const char  *</RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_daddr</NAME>
<RETURNS>const char  *</RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_sport</NAME>
<RETURNS>uint16_t  </RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_dport</NAME>
<RETURNS>uint16_t  </RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_is_alive</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_fd</NAME>
<RETURNS>prelude_io_t  *</RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_close</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_set_fd</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_t *cnx, prelude_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_set_state</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_t *cnx, int state
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_state</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_socket_filename</NAME>
<RETURNS>void  </RETURNS>
char *buf, size_t size, uint16_t port
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_get_client</NAME>
<RETURNS>prelude_client_t  *</RETURNS>
prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_new</NAME>
<RETURNS>prelude_connection_t  *</RETURNS>
prelude_client_t *client, const char *addr, uint16_t port
</FUNCTION>
<TYPEDEF>
<NAME>idmef_string_t</NAME>
typedef idmef_data_t idmef_string_t;
</TYPEDEF>
<MACRO>
<NAME>idmef_type_string</NAME>
#define idmef_type_string 0
</MACRO>
<FUNCTION>
<NAME>idmef_string_new</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_new_nodup</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
char *str
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_new_ref</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
const char *str
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_new_dup</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
const char *str
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_new_dup_fast</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_destroy_internal</NAME>
<RETURNS>void  </RETURNS>
idmef_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_new_nodup_fast</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_new_ref_fast</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
const char *str, int len
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_set_dup_fast</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *string, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_set_dup</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *string, const char *str
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_set_nodup_fast</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *string, char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_set_nodup</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *string, char *str
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_set_ref_fast</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *string, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_set_ref</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *string, const char *str
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_copy_ref</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *dst, const idmef_string_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_copy_dup</NAME>
<RETURNS>int  </RETURNS>
idmef_string_t *dst, const idmef_string_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_clone</NAME>
<RETURNS>idmef_string_t  *</RETURNS>
const idmef_string_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_get_len</NAME>
<RETURNS>size_t  </RETURNS>
idmef_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_get_string</NAME>
<RETURNS>char  *</RETURNS>
const idmef_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>idmef_string_is_empty</NAME>
<RETURNS>int  </RETURNS>
const idmef_string_t *string
</FUNCTION>
<MACRO>
<NAME>idmef_string_set_constant</NAME>
#define idmef_string_set_constant(istr, str) 			\
	idmef_string_set_ref_fast(istr, (str), sizeof((str)))
</MACRO>
<MACRO>
<NAME>idmef_string_new_constant</NAME>
#define idmef_string_new_constant(str)				\
	idmef_string_new_ref_fast((str), sizeof((str)))
</MACRO>
<FUNCTION>
<NAME>prelude_strbuf_new</NAME>
<RETURNS>prelude_strbuf_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_strbuf_t *s
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_sprintf</NAME>
<RETURNS>int  </RETURNS>
prelude_strbuf_t *s, const char *fmt, ...
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_vprintf</NAME>
<RETURNS>int  </RETURNS>
prelude_strbuf_t *s, const char *fmt, va_list ap
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_cat</NAME>
<RETURNS>int  </RETURNS>
prelude_strbuf_t *s, const char *str
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_ncat</NAME>
<RETURNS>int  </RETURNS>
prelude_strbuf_t *s, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_dont_own</NAME>
<RETURNS>void  </RETURNS>
prelude_strbuf_t *s
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_get_len</NAME>
<RETURNS>size_t  </RETURNS>
prelude_strbuf_t *s
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_get_string</NAME>
<RETURNS>char  *</RETURNS>
prelude_strbuf_t *s
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_is_empty</NAME>
<RETURNS>int  </RETURNS>
prelude_strbuf_t *s
</FUNCTION>
<FUNCTION>
<NAME>prelude_strbuf_clear</NAME>
<RETURNS>void  </RETURNS>
prelude_strbuf_t *s
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_time</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, uint8_t tag, idmef_time_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_additional_data</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_additional_data_t *additional_data
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_classification</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_classification_t *classification
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_userid</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_userid_t *userid
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_user</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_user_t *user
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_address</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_address_t *address
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_process</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_webservice</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_webservice_t *webservice
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_snmpservice</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_snmpservice_t *snmpservice
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_service</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_service_t *service
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_node</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_source</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_source_t *source
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_file_access</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_file_access_t *file_access
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_inode</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_inode_t *inode
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_file</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_file_t *file
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_linkage</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_linkage_t *linkage
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_target</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_target_t *target
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_analyzer</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_analyzer_t *analyzer
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_alertident</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_alertident_t *alertident
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_impact</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_impact_t *impact
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_action</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_action_t *action
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_confidence</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_confidence_t *confidence
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_assessment</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_assessment_t *assessment
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_tool_alert</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_tool_alert_t *tool_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_correlation_alert</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_correlation_alert_t *correlation_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_overflow_alert</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_overflow_alert_t *overflow_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_alert</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_alert_t *alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_heartbeat</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_heartbeat_t *heartbeat
</FUNCTION>
<FUNCTION>
<NAME>idmef_write_message</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msg, idmef_message_t *message
</FUNCTION>
<FUNCTION>
<NAME>prelude_ident_inc</NAME>
<RETURNS>uint64_t  </RETURNS>
prelude_ident_t *ident
</FUNCTION>
<FUNCTION>
<NAME>prelude_ident_dec</NAME>
<RETURNS>uint64_t  </RETURNS>
prelude_ident_t *ident
</FUNCTION>
<FUNCTION>
<NAME>prelude_ident_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_ident_t *ident
</FUNCTION>
<FUNCTION>
<NAME>prelude_ident_new</NAME>
<RETURNS>prelude_ident_t  *</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>MSG_FORMAT_PRELUDE_NIDS</NAME>
#define MSG_FORMAT_PRELUDE_NIDS 1
</MACRO>
<ENUM>
<NAME>prelude_client_exit_status_t</NAME>
typedef enum {
        PRELUDE_CLIENT_EXIT_STATUS_SUCCESS = 0,
        PRELUDE_CLIENT_EXIT_STATUS_FAILURE = -1
} prelude_client_exit_status_t;
</ENUM>
<ENUM>
<NAME>prelude_client_capability_t</NAME>
typedef enum {
        PRELUDE_CLIENT_CAPABILITY_RECV_IDMEF = 0x01,
        PRELUDE_CLIENT_CAPABILITY_SEND_IDMEF = 0x02,
        PRELUDE_CLIENT_CAPABILITY_RECV_ADMIN = 0x04,
        PRELUDE_CLIENT_CAPABILITY_SEND_ADMIN = 0x08,
        PRELUDE_CLIENT_CAPABILITY_RECV_CM    = 0x10,
        PRELUDE_CLIENT_CAPABILITY_SEND_CM    = 0x20
} prelude_client_capability_t;
</ENUM>
<ENUM>
<NAME>prelude_client_flags_t</NAME>
typedef enum {
        PRELUDE_CLIENT_FLAGS_ASYNC_SEND  = 0x01,
        PRELUDE_CLIENT_FLAGS_ASYNC_TIMER = 0x02
} prelude_client_flags_t;
</ENUM>
<FUNCTION>
<NAME>prelude_client_get_unique_ident</NAME>
<RETURNS>prelude_ident_t  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_credentials</NAME>
<RETURNS>void  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_manager_list</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, prelude_connection_mgr_t *mgrlist
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_manager_list</NAME>
<RETURNS>prelude_connection_mgr_t  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_init</NAME>
<RETURNS>int  </RETURNS>
prelude_client_t *client, const char *sname, const char *config, int argc, char **argv
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_new</NAME>
<RETURNS>prelude_client_t  *</RETURNS>
prelude_client_capability_t capability
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_analyzerid</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, uint64_t analyzerid
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_analyzerid</NAME>
<RETURNS>uint64_t  </RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_name</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, const char *name
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_name</NAME>
<RETURNS>const char  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_uid</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, uid_t uid
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_uid</NAME>
<RETURNS>uid_t  </RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_gid</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, gid_t gid
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_gid</NAME>
<RETURNS>gid_t  </RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_flags</NAME>
<RETURNS>prelude_client_flags_t  </RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_capability</NAME>
<RETURNS>prelude_client_capability_t  </RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_send_msg</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_heartbeat_cb</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, void (*cb)(prelude_client_t *client, idmef_message_t *hb)
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, prelude_client_exit_status_t status
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_flags</NAME>
<RETURNS>int  </RETURNS>
prelude_client_t *client, prelude_client_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_set_capability</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, prelude_client_capability_t capability
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_ident_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_tls_key_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_tls_server_ca_cert_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_tls_server_keycert_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_tls_server_trusted_cert_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_tls_client_keycert_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_tls_client_trusted_cert_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_backup_filename</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_get_config_filename</NAME>
<RETURNS>const char  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_installation_error</NAME>
<RETURNS>void  </RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_for_object</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_object_t *object, const char *buf
</FUNCTION>
<MACRO>
<NAME>PRELUDE_PLUGIN_SET_PRELOADED_SYMBOLS</NAME>
#define PRELUDE_PLUGIN_SET_PRELOADED_SYMBOLS()                     \
        prelude_plugin_set_preloaded_symbols(lt_preloaded_symbols)
</MACRO>
<MACRO>
<NAME>PRELUDE_PLUGIN_OPTION_DECLARE_STRING_CB</NAME>
#define PRELUDE_PLUGIN_OPTION_DECLARE_STRING_CB(prefix, type, name)                              \
static int prefix ## _set_ ## name(void *context, prelude_option_t *opt, const char *arg)        \
{                                                                                                \
        char *dup;                                                                               \
        type *ptr = prelude_plugin_instance_get_data(context);                                   \
                                                                                                 \
        dup = strdup(arg);                                                                       \
        if ( ! dup ) {                                                                           \
                log(LOG_ERR, "memory exhausted.\n");                                             \
                return prelude_option_error;                                                     \
        }                                                                                        \
                                                                                                 \
        if ( ptr->name )                                                                         \
                free(ptr->name);                                                                 \
                                                                                                 \
        ptr->name = dup;                                                                         \
                                                                                                 \
        return prelude_option_success;                                                           \
}                                                                                                \
                                                                                                 \
                                                                                                 \
static int prefix ## _get_ ## name(void *context, prelude_option_t *opt, char *buf, size_t size) \
{                                                                                                \
        type *ptr = prelude_plugin_instance_get_data(context);                                   \
        snprintf(buf, size, "%s", ptr->name);                                                    \
        return prelude_option_success;                                                           \
}
</MACRO>
<MACRO>
<NAME>PRELUDE_PLUGIN_GENERIC</NAME>
#define PRELUDE_PLUGIN_GENERIC               \
        char *name; int namelen;             \
        char *author; int authorlen;         \
        char *contact; int contactlen;       \
        char *desc; int desclen;             \
        void (*destroy)(prelude_plugin_instance_t *pi)
</MACRO>
<STRUCT>
<NAME>prelude_plugin_generic_t</NAME>
struct prelude_plugin_generic_t
{
        PRELUDE_PLUGIN_GENERIC;
};
</STRUCT>
<MACRO>
<NAME>prelude_plugin_name</NAME>
#define prelude_plugin_name(p) (p)->name
</MACRO>
<MACRO>
<NAME>prelude_plugin_name_len</NAME>
#define prelude_plugin_name_len(p) (p)->namelen
</MACRO>
<MACRO>
<NAME>prelude_plugin_author</NAME>
#define prelude_plugin_author(p) (p)->author
</MACRO>
<MACRO>
<NAME>prelude_plugin_author_len</NAME>
#define prelude_plugin_author_len(p) (p)->authorlen
</MACRO>
<MACRO>
<NAME>prelude_plugin_contact</NAME>
#define prelude_plugin_contact(p) (p)->contact
</MACRO>
<MACRO>
<NAME>prelude_plugin_contact_len</NAME>
#define prelude_plugin_contact_len(p) (p)->contactlen
</MACRO>
<MACRO>
<NAME>prelude_plugin_desc</NAME>
#define prelude_plugin_desc(p) (p)->desc
</MACRO>
<MACRO>
<NAME>prelude_plugin_desc_len</NAME>
#define prelude_plugin_desc_len(p) (p)->desclen
</MACRO>
<MACRO>
<NAME>prelude_plugin_set_name</NAME>
#define prelude_plugin_set_name(p, str) prelude_plugin_name(p) = (str); \
                                prelude_plugin_name_len(p) = sizeof((str))
</MACRO>
<MACRO>
<NAME>prelude_plugin_set_author</NAME>
#define prelude_plugin_set_author(p, str) prelude_plugin_author(p) = (str); \
                                  prelude_plugin_author_len(p) = sizeof((str))
</MACRO>
<MACRO>
<NAME>prelude_plugin_set_contact</NAME>
#define prelude_plugin_set_contact(p, str) prelude_plugin_contact(p) = (str); \
                                   prelude_plugin_contact_len(p) = sizeof((str))
</MACRO>
<MACRO>
<NAME>prelude_plugin_set_desc</NAME>
#define prelude_plugin_set_desc(p, str) prelude_plugin_desc(p) = (str); \
                                prelude_plugin_desc_len(p) = sizeof((str))
</MACRO>
<MACRO>
<NAME>prelude_plugin_set_destroy_func</NAME>
#define prelude_plugin_set_destroy_func(p, func) (p)->destroy = func
</MACRO>
<FUNCTION>
<NAME>prelude_plugin_set_activation_option</NAME>
<RETURNS>int  </RETURNS>
prelude_plugin_generic_t *plugin,prelude_option_t *opt, int (*commit)(prelude_plugin_instance_t *pi)
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_subscribe</NAME>
<RETURNS>int  </RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_new_instance</NAME>
<RETURNS>prelude_plugin_instance_t  *</RETURNS>
prelude_plugin_generic_t *plugin, const char *name, void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_unsubscribe</NAME>
<RETURNS>int  </RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_search_by_name</NAME>
<RETURNS>prelude_plugin_generic_t  *</RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_search_instance_by_name</NAME>
<RETURNS>prelude_plugin_instance_t  *</RETURNS>
const char *pname, const char *iname
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_set_data</NAME>
<RETURNS>void  </RETURNS>
prelude_plugin_instance_t *pi, void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_get_data</NAME>
<RETURNS>void  *</RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_set_private_data</NAME>
<RETURNS>void  </RETURNS>
prelude_plugin_instance_t *pi, void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_get_private_data</NAME>
<RETURNS>void  *</RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_get_name</NAME>
<RETURNS>const char  *</RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_get_plugin</NAME>
<RETURNS>prelude_plugin_generic_t  *</RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_load_from_dir</NAME>
<RETURNS>int  </RETURNS>
const char *dirname,int (*subscribe)(prelude_plugin_instance_t *p),void (*unsubscribe)(prelude_plugin_instance_t *pi)
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_add</NAME>
<RETURNS>int  </RETURNS>
prelude_plugin_instance_t *pi, prelude_list_t *h, const char *infos
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_del</NAME>
<RETURNS>void  </RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_compute_time</NAME>
<RETURNS>void  </RETURNS>
prelude_plugin_instance_t *pi, struct timeval *start, struct timeval *end
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_call_commit_func</NAME>
<RETURNS>int  </RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_instance_has_commit_func</NAME>
<RETURNS>int  </RETURNS>
prelude_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>prelude_plugin_set_preloaded_symbols</NAME>
<RETURNS>void  </RETURNS>
void *symlist
</FUNCTION>
<MACRO>
<NAME>prelude_plugin_compute_stats</NAME>
#define prelude_plugin_compute_stats(pi, func) do {                            \
        struct timeval start, end;                                             \
        gettimeofday(&start, NULL);                                            \
        (func);                                                                \
        gettimeofday(&end, NULL);                                              \
        prelude_plugin_instance_compute_time(&start, &end);                    \
} while(0)
</MACRO>
<MACRO>
<NAME>prelude_plugin_run</NAME>
#define prelude_plugin_run(pi, type, member, arg...) \
        (((type *)prelude_plugin_instance_get_plugin(pi))->member(arg))
</MACRO>
<FUNCTION>
<NAME>prelude_plugin_init</NAME>
<RETURNS>prelude_plugin_generic_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>prelude_hash_new</NAME>
<RETURNS>prelude_hash_t  *</RETURNS>
unsigned int (*hash_func)(const void *),int (*key_cmp_func)(const void *, const void *),void (*key_destroy_func)(void *),void (*value_destroy_func)(void *)
</FUNCTION>
<FUNCTION>
<NAME>prelude_hash_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_hash_t *hash
</FUNCTION>
<FUNCTION>
<NAME>prelude_hash_set</NAME>
<RETURNS>int  </RETURNS>
prelude_hash_t *hash, void *key, void *value
</FUNCTION>
<FUNCTION>
<NAME>prelude_hash_get</NAME>
<RETURNS>void  *</RETURNS>
prelude_hash_t *hash, const void *key
</FUNCTION>
<FUNCTION>
<NAME>prelude_hash_elem_destroy</NAME>
<RETURNS>int  </RETURNS>
prelude_hash_t *hash, const void *key
</FUNCTION>
<FUNCTION>
<NAME>prelude_failover_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_failover_t *failover
</FUNCTION>
<FUNCTION>
<NAME>prelude_failover_new</NAME>
<RETURNS>prelude_failover_t  *</RETURNS>
const char *dirname
</FUNCTION>
<FUNCTION>
<NAME>prelude_failover_set_quota</NAME>
<RETURNS>void  </RETURNS>
prelude_failover_t *failover, size_t limit
</FUNCTION>
<FUNCTION>
<NAME>prelude_failover_save_msg</NAME>
<RETURNS>int  </RETURNS>
prelude_failover_t *failover, prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_failover_get_saved_msg</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_failover_t *failover, prelude_msg_t **out
</FUNCTION>
<FUNCTION>
<NAME>prelude_failover_get_deleted_msg_count</NAME>
<RETURNS>unsigned int  </RETURNS>
prelude_failover_t *failover
</FUNCTION>
<FUNCTION>
<NAME>prelude_failover_get_available_msg_count</NAME>
<RETURNS>unsigned int  </RETURNS>
prelude_failover_t *failover
</FUNCTION>
<MACRO>
<NAME>PRELUDE_ASYNC_TIMER</NAME>
#define PRELUDE_ASYNC_TIMER   0x01
</MACRO>
<MACRO>
<NAME>PRELUDE_ASYNC_MESSAGE</NAME>
#define PRELUDE_ASYNC_MESSAGE 0x02
</MACRO>
<USER_FUNCTION>
<NAME>prelude_async_func_t</NAME>
<RETURNS>void </RETURNS>
void *object, void *data
</USER_FUNCTION>
<MACRO>
<NAME>PRELUDE_ASYNC_OBJECT</NAME>
#define PRELUDE_ASYNC_OBJECT                   \
        PRELUDE_LINKED_OBJECT;                 \
        void *data;                            \
        prelude_async_func_t func
</MACRO>
<STRUCT>
<NAME>prelude_async_object_t</NAME>
struct prelude_async_object_t
{
        PRELUDE_ASYNC_OBJECT;
};
</STRUCT>
<FUNCTION>
<NAME>prelude_async_init</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>prelude_async_get_flags</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>prelude_async_set_flags</NAME>
<RETURNS>void  </RETURNS>
int flags
</FUNCTION>
<FUNCTION>
<NAME>prelude_async_add</NAME>
<RETURNS>void  </RETURNS>
prelude_async_object_t *obj
</FUNCTION>
<FUNCTION>
<NAME>prelude_async_del</NAME>
<RETURNS>void  </RETURNS>
prelude_async_object_t *obj
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_additional_data</NAME>
<RETURNS>idmef_additional_data_t  *</RETURNS>
prelude_msg_t *msg, idmef_additional_data_t *additional_data
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_classification</NAME>
<RETURNS>idmef_classification_t  *</RETURNS>
prelude_msg_t *msg, idmef_classification_t *classification
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_userid</NAME>
<RETURNS>idmef_userid_t  *</RETURNS>
prelude_msg_t *msg, idmef_userid_t *userid
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_user</NAME>
<RETURNS>idmef_user_t  *</RETURNS>
prelude_msg_t *msg, idmef_user_t *user
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_address</NAME>
<RETURNS>idmef_address_t  *</RETURNS>
prelude_msg_t *msg, idmef_address_t *address
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_process</NAME>
<RETURNS>idmef_process_t  *</RETURNS>
prelude_msg_t *msg, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_webservice</NAME>
<RETURNS>idmef_webservice_t  *</RETURNS>
prelude_msg_t *msg, idmef_webservice_t *webservice
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_snmpservice</NAME>
<RETURNS>idmef_snmpservice_t  *</RETURNS>
prelude_msg_t *msg, idmef_snmpservice_t *snmpservice
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_service</NAME>
<RETURNS>idmef_service_t  *</RETURNS>
prelude_msg_t *msg, idmef_service_t *service
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_node</NAME>
<RETURNS>idmef_node_t  *</RETURNS>
prelude_msg_t *msg, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_source</NAME>
<RETURNS>idmef_source_t  *</RETURNS>
prelude_msg_t *msg, idmef_source_t *source
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_file_access</NAME>
<RETURNS>idmef_file_access_t  *</RETURNS>
prelude_msg_t *msg, idmef_file_access_t *file_access
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_inode</NAME>
<RETURNS>idmef_inode_t  *</RETURNS>
prelude_msg_t *msg, idmef_inode_t *inode
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_file</NAME>
<RETURNS>idmef_file_t  *</RETURNS>
prelude_msg_t *msg, idmef_file_t *file
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_linkage</NAME>
<RETURNS>idmef_linkage_t  *</RETURNS>
prelude_msg_t *msg, idmef_linkage_t *linkage
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_target</NAME>
<RETURNS>idmef_target_t  *</RETURNS>
prelude_msg_t *msg, idmef_target_t *target
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_analyzer</NAME>
<RETURNS>idmef_analyzer_t  *</RETURNS>
prelude_msg_t *msg, idmef_analyzer_t *analyzer
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_alertident</NAME>
<RETURNS>idmef_alertident_t  *</RETURNS>
prelude_msg_t *msg, idmef_alertident_t *alertident
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_impact</NAME>
<RETURNS>idmef_impact_t  *</RETURNS>
prelude_msg_t *msg, idmef_impact_t *impact
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_action</NAME>
<RETURNS>idmef_action_t  *</RETURNS>
prelude_msg_t *msg, idmef_action_t *action
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_confidence</NAME>
<RETURNS>idmef_confidence_t  *</RETURNS>
prelude_msg_t *msg, idmef_confidence_t *confidence
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_assessment</NAME>
<RETURNS>idmef_assessment_t  *</RETURNS>
prelude_msg_t *msg, idmef_assessment_t *assessment
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_tool_alert</NAME>
<RETURNS>idmef_tool_alert_t  *</RETURNS>
prelude_msg_t *msg, idmef_tool_alert_t *tool_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_correlation_alert</NAME>
<RETURNS>idmef_correlation_alert_t  *</RETURNS>
prelude_msg_t *msg, idmef_correlation_alert_t *correlation_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_overflow_alert</NAME>
<RETURNS>idmef_overflow_alert_t  *</RETURNS>
prelude_msg_t *msg, idmef_overflow_alert_t *overflow_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_alert</NAME>
<RETURNS>idmef_alert_t  *</RETURNS>
prelude_msg_t *msg, idmef_alert_t *alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_read_heartbeat</NAME>
<RETURNS>idmef_heartbeat_t  *</RETURNS>
prelude_msg_t *msg, idmef_heartbeat_t *heartbeat
</FUNCTION>
<MACRO>
<NAME>AI_CANONNAME</NAME>
 #define AI_CANONNAME 0x01
</MACRO>
<FUNCTION>
<NAME>prelude_inet_addr_is_loopback</NAME>
<RETURNS>int  </RETURNS>
int af, void *addr
</FUNCTION>
<FUNCTION>
<NAME>prelude_inet_sockaddr_get_inaddr</NAME>
<RETURNS>void  *</RETURNS>
struct sockaddr *sa
</FUNCTION>
<FUNCTION>
<NAME>prelude_inet_gai_strerror</NAME>
<RETURNS>const char  *</RETURNS>
int errcode
</FUNCTION>
<FUNCTION>
<NAME>prelude_inet_freeaddrinfo</NAME>
<RETURNS>void  </RETURNS>
prelude_addrinfo_t *info
</FUNCTION>
<FUNCTION>
<NAME>prelude_inet_getaddrinfo</NAME>
<RETURNS>int  </RETURNS>
const char *node, const char *service,const prelude_addrinfo_t *hints, prelude_addrinfo_t **res
</FUNCTION>
<FUNCTION>
<NAME>prelude_inet_ntop</NAME>
<RETURNS>const char  *</RETURNS>
int af, const void *src, char *dst, size_t cnt
</FUNCTION>
<MACRO>
<NAME>PRELUDE_LIST_HEAD_INIT</NAME>
#define PRELUDE_LIST_HEAD_INIT(name) { &(name), &(name) }
</MACRO>
<MACRO>
<NAME>PRELUDE_LIST_HEAD</NAME>
#define PRELUDE_LIST_HEAD(name) \
	prelude_list_t name = PRELUDE_LIST_HEAD_INIT(name)
</MACRO>
<MACRO>
<NAME>PRELUDE_INIT_LIST_HEAD</NAME>
#define PRELUDE_INIT_LIST_HEAD(ptr) do { \
	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
} while (0)
</MACRO>
<MACRO>
<NAME>prelude_list_entry</NAME>
#define prelude_list_entry(ptr, type, member) \
	((type *)((unsigned long)(ptr) - (unsigned long)(&((type *)0)->member)))
</MACRO>
<MACRO>
<NAME>prelude_list_get_next</NAME>
#define prelude_list_get_next(pos, list, class, member) \
        pos ? \
                ((pos)->member.next == (list)) ? NULL : \
                                prelude_list_entry((pos)->member.next, class, member) \
        : \
                ((list)->next == (list)) ? NULL : \
                                prelude_list_entry((list)->next, class, member)
</MACRO>
<MACRO>
<NAME>prelude_list_get_next_safe</NAME>
#define prelude_list_get_next_safe(pos, bkp, list, class, member)                                                                \
        pos ?                                                                                                            \
              (((pos) = bkp),                                                                                            \
               ((bkp) = (! (bkp) || (bkp)->member.next == list) ? NULL : prelude_list_entry((pos)->member.next, class, member)), \
               (pos))                                                                                                    \
        :                                                                                                                \
              (((pos) = ((list)->next == list) ? NULL : prelude_list_entry((list)->next, class, member)),                        \
               ((bkp) = (! (pos) ||(pos)->member.next == list ) ? NULL : prelude_list_entry((pos)->member.next, class, member)), \
               (pos))
</MACRO>
<MACRO>
<NAME>prelude_list_for_each</NAME>
#define prelude_list_for_each(pos, head) \
	for (pos = (head)->next; pos != (head); pos = pos->next)
</MACRO>
<MACRO>
<NAME>prelude_list_for_each_safe</NAME>
#define prelude_list_for_each_safe(pos, n, head) \
        for (pos = (head)->next, n = pos->next; pos != (head); \
                pos = n, n = pos->next)
</MACRO>
<MACRO>
<NAME>prelude_list_for_each_reversed</NAME>
#define prelude_list_for_each_reversed(pos, head) \
        for (pos = (head)->prev; pos != (head); pos = pos->prev)
</MACRO>
<MACRO>
<NAME>prelude_list_for_each_reversed_safe</NAME>
#define prelude_list_for_each_reversed_safe(pos, n, head) \
        for (pos = (head)->prev, n = pos->prev; pos != (head); \
                 pos = n, n = pos->prev)
</MACRO>
<FUNCTION>
<NAME>start_routine</NAME>
<RETURNS>return  </RETURNS>
arg
</FUNCTION>
<MACRO>
<NAME>pthread_create</NAME>
#define pthread_create gprof_pthread_create
</MACRO>
<MACRO>
<NAME>INT8_MIN</NAME>
 #define INT8_MIN               (-128)
</MACRO>
<MACRO>
<NAME>INT16_MIN</NAME>
 #define INT16_MIN              (-32767 - 1)
</MACRO>
<MACRO>
<NAME>INT32_MIN</NAME>
 #define INT32_MIN              (-2147483647 - 1)
</MACRO>
<MACRO>
<NAME>INT64_MIN</NAME>
 #define INT64_MIN              (-__INT64_SUFFIX(9223372036854775807) - 1)
</MACRO>
<MACRO>
<NAME>INT8_MAX</NAME>
 #define INT8_MAX               (127)
</MACRO>
<MACRO>
<NAME>INT16_MAX</NAME>
 #define INT16_MAX              (32767)
</MACRO>
<MACRO>
<NAME>INT32_MAX</NAME>
 #define INT32_MAX              (2147483647)
</MACRO>
<MACRO>
<NAME>INT64_MAX</NAME>
 #define INT64_MAX              (__INT64_SUFFIX(9223372036854775807))
</MACRO>
<MACRO>
<NAME>UINT8_MAX</NAME>
 #define UINT8_MAX              (255)
</MACRO>
<MACRO>
<NAME>UINT16_MAX</NAME>
 #define UINT16_MAX             (65535)
</MACRO>
<MACRO>
<NAME>UINT32_MAX</NAME>
 #define UINT32_MAX             (4294967295U)
</MACRO>
<MACRO>
<NAME>UINT64_MAX</NAME>
 #define UINT64_MAX             (__UINT64_SUFFIX(18446744073709551615))
</MACRO>
<MACRO>
<NAME>INTMAX_MIN</NAME>
 #define INTMAX_MIN             INT64_MIN
</MACRO>
<MACRO>
<NAME>INTMAX_MAX</NAME>
 #define INTMAX_MAX             INT64_MAX
</MACRO>
<MACRO>
<NAME>UINTMAX_MAX</NAME>
 #define UINTMAX_MAX            UINT64_MAX
</MACRO>
<MACRO>
<NAME>PRId64</NAME>
 #define PRId64      __PRELUDE_PRI64_PREFIX "d"
</MACRO>
<MACRO>
<NAME>PRIi64</NAME>
 #define PRIi64      __PRELUDE_PRI64_PREFIX "i"
</MACRO>
<MACRO>
<NAME>PRIo64</NAME>
 #define PRIo64      __PRELUDE_PRI64_PREFIX "o"
</MACRO>
<MACRO>
<NAME>PRIx64</NAME>
 #define PRIx64      __PRELUDE_PRI64_PREFIX "x"
</MACRO>
<MACRO>
<NAME>PRIX64</NAME>
 #define PRIX64      __PRELUDE_PRI64_PREFIX "X"
</MACRO>
<MACRO>
<NAME>PRIu64</NAME>
 #define PRIu64      __PRELUDE_PRI64_PREFIX "u"
</MACRO>
<MACRO>
<NAME>SCNd64</NAME>
 #define SCNd64      __PRELUDE_PRI64_PREFIX "d"
</MACRO>
<MACRO>
<NAME>SCNi64</NAME>
 #define SCNi64      __PRELUDE_PRI64_PREFIX "i"
</MACRO>
<MACRO>
<NAME>SCNo64</NAME>
 #define SCNo64      __PRELUDE_PRI64_PREFIX "o"
</MACRO>
<MACRO>
<NAME>SCNx64</NAME>
 #define SCNx64      __PRELUDE_PRI64_PREFIX "x"
</MACRO>
<MACRO>
<NAME>SCNu64</NAME>
 #define SCNu64      __PRELUDE_PRI64_PREFIX "u"
</MACRO>
<TYPEDEF>
<NAME>int8_t</NAME>
 typedef signed char int8_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint8_t</NAME>
 typedef unsigned char uint8_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int16_t</NAME>
 typedef short int16_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint16_t</NAME>
 typedef unsigned short uint16_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int32_t</NAME>
 typedef int int32_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint32_t</NAME>
 typedef unsigned int uint32_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int64_t</NAME>
  typedef long int64_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint64_t</NAME>
  typedef unsigned long uint64_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int64_t</NAME>
  typedef long long int64_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint64_t</NAME>
  typedef unsigned long long uint64_t;
</TYPEDEF>
<MACRO>
<NAME>LIBPRELUDE_VERSION</NAME>
#define LIBPRELUDE_VERSION "0.9.0-svn"
</MACRO>
<FUNCTION>
<NAME>prelude_check_version</NAME>
<RETURNS>const char  *</RETURNS>
const char *rq_version
</FUNCTION>
<FUNCTION>
<NAME>config_get_next</NAME>
<RETURNS>int  </RETURNS>
config_t *cfg, char **section,char **entry, char **value, int *line
</FUNCTION>
<FUNCTION>
<NAME>config_get_section</NAME>
<RETURNS>int  </RETURNS>
config_t *cfg, const char *section, int *line
</FUNCTION>
<FUNCTION>
<NAME>config_get</NAME>
<RETURNS>char  *</RETURNS>
config_t *cfg, const char *section, const char *entry, int *line
</FUNCTION>
<FUNCTION>
<NAME>config_set</NAME>
<RETURNS>int  </RETURNS>
config_t *cfg, const char *section, const char *entry, const char *val
</FUNCTION>
<FUNCTION>
<NAME>config_open</NAME>
<RETURNS>config_t  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>config_close</NAME>
<RETURNS>int  </RETURNS>
config_t *cfg
</FUNCTION>
<FUNCTION>
<NAME>config_del</NAME>
<RETURNS>int  </RETURNS>
config_t *cfg, const char *section, const char *entry
</FUNCTION>
<STRUCT>
<NAME>prelude_timer_t</NAME>
struct prelude_timer_t
{
        prelude_list_t list;

        int expire;
        time_t start_time;

        void *data;
        void (*function)(void *data);
};
</STRUCT>
<MACRO>
<NAME>timer_expire</NAME>
#define timer_expire(timer) (timer)->expire
</MACRO>
<MACRO>
<NAME>timer_data</NAME>
#define timer_data(timer) (timer)->data
</MACRO>
<MACRO>
<NAME>timer_func</NAME>
#define timer_func(timer) (timer)->function
</MACRO>
<MACRO>
<NAME>timer_set_expire</NAME>
#define timer_set_expire(timer, x) timer_expire((timer)) = (x)
</MACRO>
<MACRO>
<NAME>timer_set_data</NAME>
#define timer_set_data(timer, x) timer_data((timer)) = (x)
</MACRO>
<MACRO>
<NAME>timer_set_callback</NAME>
#define timer_set_callback(timer, x) timer_func((timer)) = (x)
</MACRO>
<FUNCTION>
<NAME>timer_init</NAME>
<RETURNS>void  </RETURNS>
prelude_timer_t *timer
</FUNCTION>
<FUNCTION>
<NAME>timer_reset</NAME>
<RETURNS>void  </RETURNS>
prelude_timer_t *timer
</FUNCTION>
<FUNCTION>
<NAME>timer_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_timer_t *timer
</FUNCTION>
<FUNCTION>
<NAME>timer_elapsed</NAME>
<RETURNS>void  </RETURNS>
prelude_timer_t *timer, struct timeval *tv
</FUNCTION>
<FUNCTION>
<NAME>prelude_wake_up_timer</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>timer_flush</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>timer_lock_critical_region</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>timer_unlock_critical_region</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>prelude_bool_t</NAME>
typedef enum { PRELUDE_BOOL_TRUE = TRUE, PRELUDE_BOOL_FALSE = FALSE } prelude_bool_t;
</ENUM>
<FUNCTION>
<NAME>prelude_realloc</NAME>
<RETURNS>void  *</RETURNS>
void *ptr, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_resolve_addr</NAME>
<RETURNS>int  </RETURNS>
const char *hostname, struct in_addr *addr
</FUNCTION>
<FUNCTION>
<NAME>prelude_open_persistant_tmpfile</NAME>
<RETURNS>int  </RETURNS>
const char *filename, int flags, mode_t mode
</FUNCTION>
<FUNCTION>
<NAME>prelude_read_multiline</NAME>
<RETURNS>int  </RETURNS>
FILE *fd, int *line, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_hton64</NAME>
<RETURNS>uint64_t  </RETURNS>
uint64_t val
</FUNCTION>
<FUNCTION>
<NAME>prelude_get_file_name_and_path</NAME>
<RETURNS>int  </RETURNS>
const char *str, char **name, char **path
</FUNCTION>
<FUNCTION>
<NAME>prelude_get_gmt_offset</NAME>
<RETURNS>int  </RETURNS>
time_t time_local, int *gmt_offset
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_broadcast</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_mgr_t *cmgr, prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_broadcast_async</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_mgr_t *cmgr, prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_new</NAME>
<RETURNS>prelude_connection_mgr_t  *</RETURNS>
prelude_client_t *client, const char *cfgline
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_notify_connection</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_mgr_t *mgr, void (*callback)(prelude_list_t *clist)
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_get_connection_list</NAME>
<RETURNS>prelude_list_t  *</RETURNS>
prelude_connection_mgr_t *mgr
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_add_connection</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_mgr_t **mgr_ptr, prelude_connection_t *cnx, int use_timer
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_set_connection_dead</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_mgr_t *mgr, prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_search_connection</NAME>
<RETURNS>prelude_connection_t  *</RETURNS>
prelude_connection_mgr_t *mgr, const char *addr
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_flush_backup</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_mgr_t *mgr, prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_tell_connection_dead</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_mgr_t *mgr, prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_tell_connection_alive</NAME>
<RETURNS>int  </RETURNS>
prelude_connection_mgr_t *mgr, prelude_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>prelude_connection_mgr_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_connection_mgr_t *mgr
</FUNCTION>
<MACRO>
<NAME>PRELUDE_OPTION_REPLY_TYPE_SET</NAME>
#define PRELUDE_OPTION_REPLY_TYPE_SET   0x01
</MACRO>
<MACRO>
<NAME>PRELUDE_OPTION_REPLY_TYPE_GET</NAME>
#define PRELUDE_OPTION_REPLY_TYPE_GET   0x02
</MACRO>
<MACRO>
<NAME>PRELUDE_OPTION_REPLY_TYPE_LIST</NAME>
#define PRELUDE_OPTION_REPLY_TYPE_LIST  0x04
</MACRO>
<MACRO>
<NAME>PRELUDE_OPTION_REPLY_TYPE_ERROR</NAME>
#define PRELUDE_OPTION_REPLY_TYPE_ERROR 0x08
</MACRO>
<FUNCTION>
<NAME>prelude_option_push_request</NAME>
<RETURNS>int  </RETURNS>
prelude_msgbuf_t *msg, int type, const char *request
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_new_request</NAME>
<RETURNS>int  </RETURNS>
prelude_client_t *client, prelude_msgbuf_t *msgbuf, uint32_t request_id, uint64_t target_id
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_process_request</NAME>
<RETURNS>int  </RETURNS>
prelude_client_t *client, prelude_io_t *fd, prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_recv_reply</NAME>
<RETURNS>int  </RETURNS>
prelude_msg_t *msg, uint64_t *source_id, uint32_t *request_id, void **value
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_new</NAME>
<RETURNS>idmef_criterion_t  *</RETURNS>
idmef_object_t *object,idmef_criterion_value_t *value, idmef_value_relation_t relation
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_clone</NAME>
<RETURNS>idmef_criterion_t  *</RETURNS>
idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_print</NAME>
<RETURNS>void  </RETURNS>
const idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_to_string</NAME>
<RETURNS>int  </RETURNS>
const idmef_criterion_t *criterion, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_get_object</NAME>
<RETURNS>idmef_object_t  *</RETURNS>
idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_get_value</NAME>
<RETURNS>idmef_criterion_value_t  *</RETURNS>
idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_get_relation</NAME>
<RETURNS>idmef_value_relation_t  </RETURNS>
idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_match</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_t *criterion, idmef_message_t *message
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_new</NAME>
<RETURNS>idmef_criteria_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_clone</NAME>
<RETURNS>idmef_criteria_t  *</RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_print</NAME>
<RETURNS>void  </RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_criteria_t *criteria, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_is_criterion</NAME>
<RETURNS>int  </RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_get_criterion</NAME>
<RETURNS>idmef_criterion_t  *</RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_set_criterion</NAME>
<RETURNS>void  </RETURNS>
idmef_criteria_t *criteria, idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_or_criteria</NAME>
<RETURNS>void  </RETURNS>
idmef_criteria_t *criteria, idmef_criteria_t *criteria2
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_and_criteria</NAME>
<RETURNS>void  </RETURNS>
idmef_criteria_t *criteria, idmef_criteria_t *criteria2
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_match</NAME>
<RETURNS>int  </RETURNS>
idmef_criteria_t *criteria, idmef_message_t *message
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_get_or</NAME>
<RETURNS>idmef_criteria_t  *</RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_get_and</NAME>
<RETURNS>idmef_criteria_t  *</RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<MACRO>
<NAME>idmef_type_data</NAME>
#define idmef_type_data 2
</MACRO>
<STRUCT>
<NAME>data</NAME>
struct data
{
        int refcount;
        
        int flags;
        size_t len;

        union {
                unsigned char *rw_data;
                const unsigned char *ro_data;
        };
</STRUCT>
<FUNCTION>
<NAME>idmef_data_new</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_ref</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_dup</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
const unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_nodup</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_ref</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
const unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_nodup</NAME>
<RETURNS>int  </RETURNS>
idmef_data_t *data, unsigned char *buf, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_dup</NAME>
<RETURNS>int  </RETURNS>
idmef_data_t *data, const unsigned char *buf, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_ref</NAME>
<RETURNS>int  </RETURNS>
idmef_data_t *data, const unsigned char *buf, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_copy_ref</NAME>
<RETURNS>int  </RETURNS>
idmef_data_t *dst, const idmef_data_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_copy_dup</NAME>
<RETURNS>int  </RETURNS>
idmef_data_t *dst, const idmef_data_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_clone</NAME>
<RETURNS>idmef_data_t  *</RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_len</NAME>
<RETURNS>size_t  </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_data</NAME>
<RETURNS>unsigned char  *</RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_is_empty</NAME>
<RETURNS>int  </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_data_t *data, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_destroy_internal</NAME>
<RETURNS>void  </RETURNS>
idmef_data_t *data
</FUNCTION>
<MACRO>
<NAME>idmef_data_set_constant_ref</NAME>
#define idmef_data_set_constant_ref(data, buf)      \
        idmef_data_set_ref(data, buf, sizeof(buf))
</MACRO>
<FUNCTION>
<NAME>idmef_additional_data_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_additional_data_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_classification_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_userid_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_userid_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_user_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_address_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_process_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_webservice_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_webservice_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmpservice_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_snmpservice_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_service_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_node_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_source_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_file_access_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_inode_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_file_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_linkage_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_target_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_analyzer_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_alertident_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_impact_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_action_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_confidence_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_assessment_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_tool_alert_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_correlation_alert_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_overflow_alert_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_alert_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_heartbeat_t *ptr, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_message_t *ptr, char *buffer, size_t size
</FUNCTION>
<ENUM>
<NAME>idmef_criterion_value_type_t</NAME>
typedef enum {
	idmef_criterion_value_type_fixed = 0,
	idmef_criterion_value_type_non_linear_time = 1
}	idmef_criterion_value_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_new</NAME>
<RETURNS>idmef_criterion_value_non_linear_time_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_new_string</NAME>
<RETURNS>idmef_criterion_value_non_linear_time_t  *</RETURNS>
const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_clone</NAME>
<RETURNS>idmef_criterion_value_non_linear_time_t  *</RETURNS>
const idmef_criterion_value_non_linear_time_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_year</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int year
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_month</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int month
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_yday</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int yday
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_mday</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int mday
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_wday</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int wday
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_hour</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int hour
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_min</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int min
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_set_sec</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,int sec
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_year</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_month</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_yday</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_mday</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_wday</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_hour</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_min</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_get_sec</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_print</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_non_linear_time_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_non_linear_time_t *time,char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_new_fixed</NAME>
<RETURNS>idmef_criterion_value_t  *</RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_new_non_linear_time</NAME>
<RETURNS>idmef_criterion_value_t  *</RETURNS>
idmef_criterion_value_non_linear_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_new_generic</NAME>
<RETURNS>idmef_criterion_value_t  *</RETURNS>
idmef_object_t *object, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_clone</NAME>
<RETURNS>idmef_criterion_value_t  *</RETURNS>
const idmef_criterion_value_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_get_type</NAME>
<RETURNS>idmef_criterion_value_type_t  </RETURNS>
const idmef_criterion_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_get_fixed</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_criterion_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_get_non_linear_time</NAME>
<RETURNS>idmef_criterion_value_non_linear_time_t  *</RETURNS>
idmef_criterion_value_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_print</NAME>
<RETURNS>void  </RETURNS>
idmef_criterion_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_criterion_value_t *value, char *buffer, size_t size
</FUNCTION>
<FUNCTION>
<NAME>tls_auth_connection</NAME>
<RETURNS>int  </RETURNS>
prelude_client_t *client, prelude_io_t *io, int crypt
</FUNCTION>
<FUNCTION>
<NAME>tls_auth_init</NAME>
<RETURNS>void  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<STRUCT>
<NAME>children_list_t</NAME>
struct children_list_t
{
	char *name;
	int list;
	idmef_value_type_id_t type;
	idmef_object_type_t object_type;
};
</STRUCT>
<STRUCT>
<NAME>object_data_t</NAME>
struct object_data_t
{
	char *name;
	children_list_t *children_list;
	void *(*get_child)(void *ptr, idmef_child_t child);
	void *(*new_child)(void *ptr, idmef_child_t child, int n);
	int (*to_numeric)(const char *name);
	const char *(*to_string)(int val);
};
</STRUCT>
<MACRO>
<NAME>CLI_HOOK</NAME>
#define CLI_HOOK 0x1 /* Option to be hooked to command line */
</MACRO>
<MACRO>
<NAME>CFG_HOOK</NAME>
#define CFG_HOOK 0x2 /* Option to be hooked to config file  */
</MACRO>
<MACRO>
<NAME>WIDE_HOOK</NAME>
#define WIDE_HOOK 0x4
</MACRO>
<MACRO>
<NAME>ALLOW_MULTIPLE_CALL</NAME>
#define ALLOW_MULTIPLE_CALL 0x8
</MACRO>
<MACRO>
<NAME>DESTROY_HOOK</NAME>
#define DESTROY_HOOK 0x20
</MACRO>
<MACRO>
<NAME>HAVE_CONTEXT</NAME>
#define HAVE_CONTEXT 0x40
</MACRO>
<MACRO>
<NAME>prelude_option_success</NAME>
#define prelude_option_success 0
</MACRO>
<MACRO>
<NAME>prelude_option_end</NAME>
#define prelude_option_end 1
</MACRO>
<MACRO>
<NAME>prelude_option_error</NAME>
#define prelude_option_error -1
</MACRO>
<ENUM>
<NAME>prelude_option_argument_t</NAME>
typedef enum {
        required_argument,
        optionnal_argument,
        no_argument
} prelude_option_argument_t;
</ENUM>
<MACRO>
<NAME>option_run_first</NAME>
#define option_run_first     -1
</MACRO>
<MACRO>
<NAME>option_run_no_order</NAME>
#define option_run_no_order   0
</MACRO>
<MACRO>
<NAME>option_run_last</NAME>
#define option_run_last       1
</MACRO>
<FUNCTION>
<NAME>prelude_option_set_priority</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *option, int priority
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_print</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, int flags, int descoff
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_wide_send_msg</NAME>
<RETURNS>int  </RETURNS>
void *context, prelude_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *option
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_parse_arguments</NAME>
<RETURNS>int  </RETURNS>
void *context, prelude_option_t *option, const char *filename, int argc, char **argv
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_add</NAME>
<RETURNS>prelude_option_t  *</RETURNS>
prelude_option_t *parent, int flags,char shortopt, const char *longopt, const char *desc,prelude_option_argument_t has_arg,int (*set)(void *context, prelude_option_t *opt, const char *optarg),int (*get)(void *context, prelude_option_t *opt, char *buf, size_t size)
</FUNCTION>
<MACRO>
<NAME>OPT_INVAL</NAME>
#define OPT_INVAL     0x1
</MACRO>
<MACRO>
<NAME>OPT_INVAL_ARG</NAME>
#define OPT_INVAL_ARG 0x2
</MACRO>
<FUNCTION>
<NAME>prelude_option_set_flags</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, int flags
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_flags</NAME>
<RETURNS>int  </RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_warnings</NAME>
<RETURNS>void  </RETURNS>
int flags, int *old_flags
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_shortname</NAME>
<RETURNS>char  </RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_longname</NAME>
<RETURNS>const char  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_private_data</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_private_data</NAME>
<RETURNS>void  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_invoke_commit</NAME>
<RETURNS>int  </RETURNS>
void *context, prelude_option_t *opt, const char *value, char *err, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_invoke_set</NAME>
<RETURNS>int  </RETURNS>
void **context, prelude_option_t *opt, const char *value, char *err, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_invoke_get</NAME>
<RETURNS>int  </RETURNS>
void *context, prelude_option_t *opt, const char *value, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_invoke_destroy</NAME>
<RETURNS>int  </RETURNS>
void *context, prelude_option_t *opt, const char *value, char *buf, size_t err
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_new</NAME>
<RETURNS>prelude_option_t  *</RETURNS>
prelude_option_t *parent
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_longopt</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, const char *longopt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_longopt</NAME>
<RETURNS>const char  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_description</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, const char *description
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_description</NAME>
<RETURNS>const char  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_has_arg</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, prelude_option_argument_t has_arg
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_has_arg</NAME>
<RETURNS>prelude_option_argument_t  </RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_value</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, const char *value
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_value</NAME>
<RETURNS>const char  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_help</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, const char *help
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_help</NAME>
<RETURNS>const char  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_input_validation_regex</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, const char *regex
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_input_validation_regex</NAME>
<RETURNS>const char  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_input_type</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, uint8_t input_type
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_input_type</NAME>
<RETURNS>uint8_t  </RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_optlist</NAME>
<RETURNS>prelude_list_t  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_next</NAME>
<RETURNS>prelude_option_t  *</RETURNS>
prelude_option_t *start, prelude_option_t *cur
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_has_optlist</NAME>
<RETURNS>int  </RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_parent</NAME>
<RETURNS>prelude_option_t  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_destroy_callback</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt,int (*destroy)(void *context, prelude_option_t *opt)
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_destroy_callback</NAME>
<RETURNS>void  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_set_callback</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt,int (*set)(void *context, prelude_option_t *opt, const char *optarg)
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_set_callback</NAME>
<RETURNS>void  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_get_callback</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt,int (*get)(void *context, prelude_option_t *opt, char *buf, size_t size)
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_get_callback</NAME>
<RETURNS>void  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_set_commit_callback</NAME>
<RETURNS>void  </RETURNS>
prelude_option_t *opt, int (*commit)(void *context, prelude_option_t *opt)
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_get_commit_callback</NAME>
<RETURNS>void  *</RETURNS>
prelude_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_new_context</NAME>
<RETURNS>prelude_option_context_t  *</RETURNS>
prelude_option_t *opt, const char *name, void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_context_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_option_context_t *oc
</FUNCTION>
<FUNCTION>
<NAME>prelude_option_search</NAME>
<RETURNS>prelude_option_t  *</RETURNS>
prelude_option_t *parent, const char *name, int flags, int walk_children
</FUNCTION>
<MACRO>
<NAME>idmef_object_type_time</NAME>
#define idmef_object_type_time 1
</MACRO>
<FUNCTION>
<NAME>idmef_time_ref</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_gettimeofday</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_string</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_ntp_timestamp</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_db_timestamp</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_destroy_internal</NAME>
<RETURNS>void  </RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_clone</NAME>
<RETURNS>idmef_time_t  *</RETURNS>
const idmef_time_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_copy</NAME>
<RETURNS>int  </RETURNS>
idmef_time_t *dst, idmef_time_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_sec</NAME>
<RETURNS>void  </RETURNS>
idmef_time_t *time, uint32_t sec
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_usec</NAME>
<RETURNS>void  </RETURNS>
idmef_time_t *time, uint32_t usec
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_gmt_offset</NAME>
<RETURNS>void  </RETURNS>
idmef_time_t *time, uint32_t gmtoff
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_time</NAME>
<RETURNS>double  </RETURNS>
const idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_sec</NAME>
<RETURNS>uint32_t  </RETURNS>
const idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_usec</NAME>
<RETURNS>uint32_t  </RETURNS>
const idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_gmt_offset</NAME>
<RETURNS>int32_t  </RETURNS>
const idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_string</NAME>
<RETURNS>int  </RETURNS>
idmef_time_t *time, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_ntp_timestamp</NAME>
<RETURNS>int  </RETURNS>
idmef_time_t *time, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_db_timestamp</NAME>
<RETURNS>int  </RETURNS>
idmef_time_t *time, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_ntp_timestamp</NAME>
<RETURNS>int  </RETURNS>
const idmef_time_t *time, char *outptr, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_timestamp</NAME>
<RETURNS>int  </RETURNS>
const idmef_time_t *time, char *outptr, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_db_timestamp</NAME>
<RETURNS>int  </RETURNS>
const idmef_time_t *time, char *outptr, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_idmef_timestamp</NAME>
<RETURNS>int  </RETURNS>
const idmef_time_t *time, char *outptr, size_t size
</FUNCTION>
<TYPEDEF>
<NAME>idmef_object_type_t</NAME>
typedef int32_t idmef_object_type_t;
</TYPEDEF>
<TYPEDEF>
<NAME>idmef_child_t</NAME>
typedef int16_t idmef_child_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_type_find_child</NAME>
<RETURNS>idmef_child_t  </RETURNS>
idmef_object_type_t type, const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_child_is_list</NAME>
<RETURNS>int  </RETURNS>
idmef_object_type_t type, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_get_child_type</NAME>
<RETURNS>idmef_value_type_id_t  </RETURNS>
idmef_object_type_t type, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_get_child_object_type</NAME>
<RETURNS>idmef_object_type_t  </RETURNS>
idmef_object_type_t type, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_get_child_enum_type</NAME>
<RETURNS>idmef_object_type_t  </RETURNS>
idmef_object_type_t type, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_get_child_name</NAME>
<RETURNS>char  *</RETURNS>
idmef_object_type_t type, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_find</NAME>
<RETURNS>idmef_object_type_t  </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_is_enum</NAME>
<RETURNS>int  </RETURNS>
idmef_object_type_t type
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_enum_to_numeric</NAME>
<RETURNS>int  </RETURNS>
idmef_object_type_t type, const char *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_enum_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_object_type_t type, int val
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_get_child</NAME>
<RETURNS>void  *</RETURNS>
void *ptr, idmef_object_type_t type, idmef_child_t child
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_new_child</NAME>
<RETURNS>void  *</RETURNS>
void *ptr, idmef_object_type_t type, idmef_child_t child, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_type_get_name</NAME>
<RETURNS>char  *</RETURNS>
idmef_object_type_t type
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_get_client</NAME>
<RETURNS>prelude_client_t  *</RETURNS>
prelude_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_new</NAME>
<RETURNS>prelude_msgbuf_t  *</RETURNS>
prelude_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_close</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_mark_end</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_set</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msgbuf, uint8_t tag, uint32_t len, const void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_get_msg</NAME>
<RETURNS>prelude_msg_t  *</RETURNS>
prelude_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_set_callback</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msgbuf, prelude_msg_t *(*send_msg)(prelude_msgbuf_t *msgbuf)
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_set_data</NAME>
<RETURNS>void  </RETURNS>
prelude_msgbuf_t *msgbuf, void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_msgbuf_get_data</NAME>
<RETURNS>void  *</RETURNS>
prelude_msgbuf_t *msgbuf
</FUNCTION>
<MACRO>
<NAME>MY_CONCAT</NAME>
#define MY_CONCAT(func, res, buffer, size, offset)		\
do {								\
	int __retval;						\
								\
	__retval = func(res, buffer + offset, size - offset);	\
	if ( __retval < 0 || __retval >= size - offset )	\
		return -1;					\
								\
	offset += __retval;					\
} while ( 0 )
</MACRO>
<MACRO>
<NAME>MY_SNPRINTF</NAME>
#define MY_SNPRINTF(buffer, size, offset, ...)			\
do {									\
	int __retval;							\
									\
	__retval = snprintf(buffer + offset, size - offset, __VA_ARGS__);	\
	if ( __retval < 0 || __retval >= size - offset )		\
		return -1;						\
									\
	offset += __retval;						\
} while ( 0 )
</MACRO>
<FUNCTION>
<NAME>idmef_additionaldata_data_to_string</NAME>
<RETURNS>const unsigned char  *</RETURNS>
idmef_additional_data_t *ad,unsigned char *buf, size_t *size
</FUNCTION>
<MACRO>
<NAME>MAX_UTC_DATETIME_SIZE</NAME>
#define MAX_UTC_DATETIME_SIZE  64   /* YYYY-MM-DDThh:mm:ss.ssZ */
</MACRO>
<MACRO>
<NAME>MAX_NTP_TIMESTAMP_SIZE</NAME>
#define MAX_NTP_TIMESTAMP_SIZE 22   /* 0xNNNNNNNN.0xNNNNNNNN + \0  */
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_PRIORITY_HIGH</NAME>
#define PRELUDE_MSG_PRIORITY_HIGH 0
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_PRIORITY_MID</NAME>
#define PRELUDE_MSG_PRIORITY_MID  1
</MACRO>
<MACRO>
<NAME>PRELUDE_MSG_PRIORITY_LOW</NAME>
#define PRELUDE_MSG_PRIORITY_LOW  2
</MACRO>
<ENUM>
<NAME>prelude_msg_status_t</NAME>
typedef enum {
        prelude_msg_error      = -1,
        prelude_msg_eof        =  0,
        prelude_msg_unfinished =  1,
        prelude_msg_finished   =  2
} prelude_msg_status_t;
</ENUM>
<FUNCTION>
<NAME>prelude_msg_read</NAME>
<RETURNS>prelude_msg_status_t  </RETURNS>
prelude_msg_t **msg, prelude_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_forward</NAME>
<RETURNS>int  </RETURNS>
prelude_msg_t *msg, prelude_io_t *dst, prelude_io_t *src
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_get</NAME>
<RETURNS>int  </RETURNS>
prelude_msg_t *msg, uint8_t *tag, uint32_t *len, void **buf
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_recycle</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_mark_end</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_dynamic_new</NAME>
<RETURNS>prelude_msg_t  *</RETURNS>
prelude_msg_t *(*flush_msg_cb)(void *data), void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_new</NAME>
<RETURNS>prelude_msg_t  *</RETURNS>
size_t msgcount, size_t msglen, uint8_t tag, uint8_t priority
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_set</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg, uint8_t tag, uint32_t len, const void *data
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_write</NAME>
<RETURNS>ssize_t  </RETURNS>
prelude_msg_t *msg, prelude_io_t *dst
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_set_tag</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg, uint8_t tag
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_set_priority</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg, uint8_t priority
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_get_tag</NAME>
<RETURNS>uint8_t  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_get_version</NAME>
<RETURNS>uint8_t  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_get_priority</NAME>
<RETURNS>uint8_t  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_get_len</NAME>
<RETURNS>uint32_t  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_get_datalen</NAME>
<RETURNS>uint32_t  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_is_empty</NAME>
<RETURNS>int  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_is_fragment</NAME>
<RETURNS>int  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_destroy</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_reset</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_set_callback</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg, prelude_msg_t *(*flush_msg_cb)(void *data)
</FUNCTION>
<FUNCTION>
<NAME>prelude_msg_set_data</NAME>
<RETURNS>void  </RETURNS>
prelude_msg_t *msg, void *data
</FUNCTION>
<MACRO>
<NAME>byte</NAME>
 #define byte(type, buf, pos) (type) ((const uint8_t *) (buf))[(pos)]
</MACRO>
<MACRO>
<NAME>byte</NAME>
 #define byte(type, buf, pos) (type) ((const uint8_t *) (buf))[sizeof(type) - 1 - (pos)]
</MACRO>
<FUNCTION>
<NAME>byte</NAME>
<RETURNS>return  </RETURNS>
uint16_t, buf, 0) << 8 | byte(uint16_t, buf, 1
</FUNCTION>
<FUNCTION>
<NAME>byte</NAME>
<RETURNS>return  </RETURNS>
int32_t, buf, 0) << 24 | byte(int32_t, buf, 1) << 16 |byte(int32_t, buf, 2) <<  8 | byte(int32_t, buf, 3
</FUNCTION>
<FUNCTION>
<NAME>byte</NAME>
<RETURNS>return  </RETURNS>
uint32_t, buf, 0) << 24 | byte(uint32_t, buf, 1) << 16 |byte(uint32_t, buf, 2) <<  8 | byte(uint32_t, buf, 3
</FUNCTION>
<FUNCTION>
<NAME>byte</NAME>
<RETURNS>return  </RETURNS>
uint64_t, buf, 0) << 56 | byte(uint64_t, buf, 1) << 48 | byte(uint64_t, buf, 2) << 40 |byte(uint64_t, buf, 3) << 32 | byte(uint64_t, buf, 4) << 24 | byte(uint64_t, buf, 5) << 16 |byte(uint64_t, buf, 6) <<  8 | byte(uint64_t, buf, 7
</FUNCTION>
<MACRO>
<NAME>align_uint16</NAME>
#define align_uint16(x) (*(const uint16_t *) (x))
</MACRO>
<MACRO>
<NAME>align_int32</NAME>
#define align_int32(x) (*(const int32_t *) (x))
</MACRO>
<MACRO>
<NAME>align_uint32</NAME>
#define align_uint32(x) (*(const uint32_t *) (x))
</MACRO>
<MACRO>
<NAME>align_uint64</NAME>
#define align_uint64(x) (*(const uint64_t *) (x))
</MACRO>
<MACRO>
<NAME>align_ipv4_addr</NAME>
#define align_ipv4_addr(x) *((const struct in_addr *) (x))
</MACRO>
<FUNCTION>
<NAME>align_ipv4_addr</NAME>
<RETURNS>return  </RETURNS>
buf
</FUNCTION>
<FUNCTION>
<NAME>ntohs</NAME>
<RETURNS>return  </RETURNS>
align_uint16(buf)
</FUNCTION>
<FUNCTION>
<NAME>ntohl</NAME>
<RETURNS>return  </RETURNS>
align_int32(buf)
</FUNCTION>
<FUNCTION>
<NAME>ntohl</NAME>
<RETURNS>return  </RETURNS>
align_uint32(buf)
</FUNCTION>
<FUNCTION>
<NAME>align_uint64</NAME>
<RETURNS>return  </RETURNS>
buf
</FUNCTION>
<MACRO>
<NAME>MSG_OWN_FORMAT</NAME>
#define MSG_OWN_FORMAT                                 253
</MACRO>
<MACRO>
<NAME>MSG_END_OF_TAG</NAME>
#define MSG_END_OF_TAG                                 254
</MACRO>
<MACRO>
<NAME>MSG_ADDITIONAL_DATA_TAG</NAME>
#define MSG_ADDITIONAL_DATA_TAG 0
</MACRO>
<MACRO>
<NAME>MSG_CLASSIFICATION_TAG</NAME>
#define MSG_CLASSIFICATION_TAG 1
</MACRO>
<MACRO>
<NAME>MSG_USERID_TAG</NAME>
#define MSG_USERID_TAG 2
</MACRO>
<MACRO>
<NAME>MSG_USER_TAG</NAME>
#define MSG_USER_TAG 3
</MACRO>
<MACRO>
<NAME>MSG_ADDRESS_TAG</NAME>
#define MSG_ADDRESS_TAG 4
</MACRO>
<MACRO>
<NAME>MSG_PROCESS_TAG</NAME>
#define MSG_PROCESS_TAG 5
</MACRO>
<MACRO>
<NAME>MSG_WEBSERVICE_TAG</NAME>
#define MSG_WEBSERVICE_TAG 6
</MACRO>
<MACRO>
<NAME>MSG_SNMPSERVICE_TAG</NAME>
#define MSG_SNMPSERVICE_TAG 7
</MACRO>
<MACRO>
<NAME>MSG_SERVICE_TAG</NAME>
#define MSG_SERVICE_TAG 8
</MACRO>
<MACRO>
<NAME>MSG_NODE_TAG</NAME>
#define MSG_NODE_TAG 9
</MACRO>
<MACRO>
<NAME>MSG_SOURCE_TAG</NAME>
#define MSG_SOURCE_TAG 10
</MACRO>
<MACRO>
<NAME>MSG_FILE_ACCESS_TAG</NAME>
#define MSG_FILE_ACCESS_TAG 11
</MACRO>
<MACRO>
<NAME>MSG_INODE_TAG</NAME>
#define MSG_INODE_TAG 12
</MACRO>
<MACRO>
<NAME>MSG_FILE_TAG</NAME>
#define MSG_FILE_TAG 13
</MACRO>
<MACRO>
<NAME>MSG_LINKAGE_TAG</NAME>
#define MSG_LINKAGE_TAG 14
</MACRO>
<MACRO>
<NAME>MSG_TARGET_TAG</NAME>
#define MSG_TARGET_TAG 15
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_TAG</NAME>
#define MSG_ANALYZER_TAG 16
</MACRO>
<MACRO>
<NAME>MSG_ALERTIDENT_TAG</NAME>
#define MSG_ALERTIDENT_TAG 17
</MACRO>
<MACRO>
<NAME>MSG_IMPACT_TAG</NAME>
#define MSG_IMPACT_TAG 18
</MACRO>
<MACRO>
<NAME>MSG_ACTION_TAG</NAME>
#define MSG_ACTION_TAG 19
</MACRO>
<MACRO>
<NAME>MSG_CONFIDENCE_TAG</NAME>
#define MSG_CONFIDENCE_TAG 20
</MACRO>
<MACRO>
<NAME>MSG_ASSESSMENT_TAG</NAME>
#define MSG_ASSESSMENT_TAG 21
</MACRO>
<MACRO>
<NAME>MSG_TOOL_ALERT_TAG</NAME>
#define MSG_TOOL_ALERT_TAG 22
</MACRO>
<MACRO>
<NAME>MSG_CORRELATION_ALERT_TAG</NAME>
#define MSG_CORRELATION_ALERT_TAG 23
</MACRO>
<MACRO>
<NAME>MSG_OVERFLOW_ALERT_TAG</NAME>
#define MSG_OVERFLOW_ALERT_TAG 24
</MACRO>
<MACRO>
<NAME>MSG_ALERT_TAG</NAME>
#define MSG_ALERT_TAG 25
</MACRO>
<MACRO>
<NAME>MSG_HEARTBEAT_TAG</NAME>
#define MSG_HEARTBEAT_TAG 26
</MACRO>
<MACRO>
<NAME>MSG_ADDITIONAL_DATA_TYPE</NAME>
#define MSG_ADDITIONAL_DATA_TYPE 27
</MACRO>
<MACRO>
<NAME>MSG_ADDITIONAL_DATA_MEANING</NAME>
#define MSG_ADDITIONAL_DATA_MEANING 28
</MACRO>
<MACRO>
<NAME>MSG_ADDITIONAL_DATA_DATA</NAME>
#define MSG_ADDITIONAL_DATA_DATA 29
</MACRO>
<MACRO>
<NAME>MSG_CLASSIFICATION_ORIGIN</NAME>
#define MSG_CLASSIFICATION_ORIGIN 27
</MACRO>
<MACRO>
<NAME>MSG_CLASSIFICATION_NAME</NAME>
#define MSG_CLASSIFICATION_NAME 28
</MACRO>
<MACRO>
<NAME>MSG_CLASSIFICATION_URL</NAME>
#define MSG_CLASSIFICATION_URL 29
</MACRO>
<MACRO>
<NAME>MSG_USERID_IDENT</NAME>
#define MSG_USERID_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_USERID_TYPE</NAME>
#define MSG_USERID_TYPE 28
</MACRO>
<MACRO>
<NAME>MSG_USERID_NAME</NAME>
#define MSG_USERID_NAME 29
</MACRO>
<MACRO>
<NAME>MSG_USERID_NUMBER</NAME>
#define MSG_USERID_NUMBER 30
</MACRO>
<MACRO>
<NAME>MSG_USER_IDENT</NAME>
#define MSG_USER_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_USER_CATEGORY</NAME>
#define MSG_USER_CATEGORY 28
</MACRO>
<MACRO>
<NAME>MSG_ADDRESS_IDENT</NAME>
#define MSG_ADDRESS_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_ADDRESS_CATEGORY</NAME>
#define MSG_ADDRESS_CATEGORY 28
</MACRO>
<MACRO>
<NAME>MSG_ADDRESS_VLAN_NAME</NAME>
#define MSG_ADDRESS_VLAN_NAME 29
</MACRO>
<MACRO>
<NAME>MSG_ADDRESS_VLAN_NUM</NAME>
#define MSG_ADDRESS_VLAN_NUM 30
</MACRO>
<MACRO>
<NAME>MSG_ADDRESS_ADDRESS</NAME>
#define MSG_ADDRESS_ADDRESS 31
</MACRO>
<MACRO>
<NAME>MSG_ADDRESS_NETMASK</NAME>
#define MSG_ADDRESS_NETMASK 32
</MACRO>
<MACRO>
<NAME>MSG_PROCESS_IDENT</NAME>
#define MSG_PROCESS_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_PROCESS_NAME</NAME>
#define MSG_PROCESS_NAME 28
</MACRO>
<MACRO>
<NAME>MSG_PROCESS_PID</NAME>
#define MSG_PROCESS_PID 29
</MACRO>
<MACRO>
<NAME>MSG_PROCESS_PATH</NAME>
#define MSG_PROCESS_PATH 30
</MACRO>
<MACRO>
<NAME>MSG_PROCESS_ARG</NAME>
#define MSG_PROCESS_ARG 31
</MACRO>
<MACRO>
<NAME>MSG_PROCESS_ENV</NAME>
#define MSG_PROCESS_ENV 32
</MACRO>
<MACRO>
<NAME>MSG_WEBSERVICE_URL</NAME>
#define MSG_WEBSERVICE_URL 27
</MACRO>
<MACRO>
<NAME>MSG_WEBSERVICE_CGI</NAME>
#define MSG_WEBSERVICE_CGI 28
</MACRO>
<MACRO>
<NAME>MSG_WEBSERVICE_HTTP_METHOD</NAME>
#define MSG_WEBSERVICE_HTTP_METHOD 29
</MACRO>
<MACRO>
<NAME>MSG_WEBSERVICE_ARG</NAME>
#define MSG_WEBSERVICE_ARG 30
</MACRO>
<MACRO>
<NAME>MSG_SNMPSERVICE_OID</NAME>
#define MSG_SNMPSERVICE_OID 27
</MACRO>
<MACRO>
<NAME>MSG_SNMPSERVICE_COMMUNITY</NAME>
#define MSG_SNMPSERVICE_COMMUNITY 28
</MACRO>
<MACRO>
<NAME>MSG_SNMPSERVICE_COMMAND</NAME>
#define MSG_SNMPSERVICE_COMMAND 29
</MACRO>
<MACRO>
<NAME>MSG_SERVICE_IDENT</NAME>
#define MSG_SERVICE_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_SERVICE_NAME</NAME>
#define MSG_SERVICE_NAME 28
</MACRO>
<MACRO>
<NAME>MSG_SERVICE_PORT</NAME>
#define MSG_SERVICE_PORT 29
</MACRO>
<MACRO>
<NAME>MSG_SERVICE_PORTLIST</NAME>
#define MSG_SERVICE_PORTLIST 30
</MACRO>
<MACRO>
<NAME>MSG_SERVICE_PROTOCOL</NAME>
#define MSG_SERVICE_PROTOCOL 31
</MACRO>
<MACRO>
<NAME>MSG_NODE_IDENT</NAME>
#define MSG_NODE_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_NODE_CATEGORY</NAME>
#define MSG_NODE_CATEGORY 28
</MACRO>
<MACRO>
<NAME>MSG_NODE_LOCATION</NAME>
#define MSG_NODE_LOCATION 29
</MACRO>
<MACRO>
<NAME>MSG_NODE_NAME</NAME>
#define MSG_NODE_NAME 30
</MACRO>
<MACRO>
<NAME>MSG_SOURCE_IDENT</NAME>
#define MSG_SOURCE_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_SOURCE_SPOOFED</NAME>
#define MSG_SOURCE_SPOOFED 28
</MACRO>
<MACRO>
<NAME>MSG_SOURCE_INTERFACE</NAME>
#define MSG_SOURCE_INTERFACE 29
</MACRO>
<MACRO>
<NAME>MSG_FILE_ACCESS_PERMISSION</NAME>
#define MSG_FILE_ACCESS_PERMISSION 27
</MACRO>
<MACRO>
<NAME>MSG_INODE_CHANGE_TIME</NAME>
#define MSG_INODE_CHANGE_TIME 27
</MACRO>
<MACRO>
<NAME>MSG_INODE_NUMBER</NAME>
#define MSG_INODE_NUMBER 28
</MACRO>
<MACRO>
<NAME>MSG_INODE_MAJOR_DEVICE</NAME>
#define MSG_INODE_MAJOR_DEVICE 29
</MACRO>
<MACRO>
<NAME>MSG_INODE_MINOR_DEVICE</NAME>
#define MSG_INODE_MINOR_DEVICE 30
</MACRO>
<MACRO>
<NAME>MSG_INODE_C_MAJOR_DEVICE</NAME>
#define MSG_INODE_C_MAJOR_DEVICE 31
</MACRO>
<MACRO>
<NAME>MSG_INODE_C_MINOR_DEVICE</NAME>
#define MSG_INODE_C_MINOR_DEVICE 32
</MACRO>
<MACRO>
<NAME>MSG_FILE_IDENT</NAME>
#define MSG_FILE_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_FILE_CATEGORY</NAME>
#define MSG_FILE_CATEGORY 28
</MACRO>
<MACRO>
<NAME>MSG_FILE_FSTYPE</NAME>
#define MSG_FILE_FSTYPE 29
</MACRO>
<MACRO>
<NAME>MSG_FILE_NAME</NAME>
#define MSG_FILE_NAME 30
</MACRO>
<MACRO>
<NAME>MSG_FILE_PATH</NAME>
#define MSG_FILE_PATH 31
</MACRO>
<MACRO>
<NAME>MSG_FILE_CREATE_TIME</NAME>
#define MSG_FILE_CREATE_TIME 32
</MACRO>
<MACRO>
<NAME>MSG_FILE_MODIFY_TIME</NAME>
#define MSG_FILE_MODIFY_TIME 33
</MACRO>
<MACRO>
<NAME>MSG_FILE_ACCESS_TIME</NAME>
#define MSG_FILE_ACCESS_TIME 34
</MACRO>
<MACRO>
<NAME>MSG_FILE_DATA_SIZE</NAME>
#define MSG_FILE_DATA_SIZE 35
</MACRO>
<MACRO>
<NAME>MSG_FILE_DISK_SIZE</NAME>
#define MSG_FILE_DISK_SIZE 36
</MACRO>
<MACRO>
<NAME>MSG_LINKAGE_CATEGORY</NAME>
#define MSG_LINKAGE_CATEGORY 27
</MACRO>
<MACRO>
<NAME>MSG_LINKAGE_NAME</NAME>
#define MSG_LINKAGE_NAME 28
</MACRO>
<MACRO>
<NAME>MSG_LINKAGE_PATH</NAME>
#define MSG_LINKAGE_PATH 29
</MACRO>
<MACRO>
<NAME>MSG_TARGET_IDENT</NAME>
#define MSG_TARGET_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_TARGET_DECOY</NAME>
#define MSG_TARGET_DECOY 28
</MACRO>
<MACRO>
<NAME>MSG_TARGET_INTERFACE</NAME>
#define MSG_TARGET_INTERFACE 29
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_ANALYZERID</NAME>
#define MSG_ANALYZER_ANALYZERID 27
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_MANUFACTURER</NAME>
#define MSG_ANALYZER_MANUFACTURER 28
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_MODEL</NAME>
#define MSG_ANALYZER_MODEL 29
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_VERSION</NAME>
#define MSG_ANALYZER_VERSION 30
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_CLASS</NAME>
#define MSG_ANALYZER_CLASS 31
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_OSTYPE</NAME>
#define MSG_ANALYZER_OSTYPE 32
</MACRO>
<MACRO>
<NAME>MSG_ANALYZER_OSVERSION</NAME>
#define MSG_ANALYZER_OSVERSION 33
</MACRO>
<MACRO>
<NAME>MSG_ALERTIDENT_ALERTIDENT</NAME>
#define MSG_ALERTIDENT_ALERTIDENT 27
</MACRO>
<MACRO>
<NAME>MSG_ALERTIDENT_ANALYZERID</NAME>
#define MSG_ALERTIDENT_ANALYZERID 28
</MACRO>
<MACRO>
<NAME>MSG_IMPACT_SEVERITY</NAME>
#define MSG_IMPACT_SEVERITY 27
</MACRO>
<MACRO>
<NAME>MSG_IMPACT_COMPLETION</NAME>
#define MSG_IMPACT_COMPLETION 28
</MACRO>
<MACRO>
<NAME>MSG_IMPACT_TYPE</NAME>
#define MSG_IMPACT_TYPE 29
</MACRO>
<MACRO>
<NAME>MSG_IMPACT_DESCRIPTION</NAME>
#define MSG_IMPACT_DESCRIPTION 30
</MACRO>
<MACRO>
<NAME>MSG_ACTION_CATEGORY</NAME>
#define MSG_ACTION_CATEGORY 27
</MACRO>
<MACRO>
<NAME>MSG_ACTION_DESCRIPTION</NAME>
#define MSG_ACTION_DESCRIPTION 28
</MACRO>
<MACRO>
<NAME>MSG_CONFIDENCE_RATING</NAME>
#define MSG_CONFIDENCE_RATING 27
</MACRO>
<MACRO>
<NAME>MSG_CONFIDENCE_CONFIDENCE</NAME>
#define MSG_CONFIDENCE_CONFIDENCE 28
</MACRO>
<MACRO>
<NAME>MSG_TOOL_ALERT_NAME</NAME>
#define MSG_TOOL_ALERT_NAME 27
</MACRO>
<MACRO>
<NAME>MSG_TOOL_ALERT_COMMAND</NAME>
#define MSG_TOOL_ALERT_COMMAND 28
</MACRO>
<MACRO>
<NAME>MSG_CORRELATION_ALERT_NAME</NAME>
#define MSG_CORRELATION_ALERT_NAME 27
</MACRO>
<MACRO>
<NAME>MSG_OVERFLOW_ALERT_PROGRAM</NAME>
#define MSG_OVERFLOW_ALERT_PROGRAM 27
</MACRO>
<MACRO>
<NAME>MSG_OVERFLOW_ALERT_SIZE</NAME>
#define MSG_OVERFLOW_ALERT_SIZE 28
</MACRO>
<MACRO>
<NAME>MSG_OVERFLOW_ALERT_BUFFER</NAME>
#define MSG_OVERFLOW_ALERT_BUFFER 29
</MACRO>
<MACRO>
<NAME>MSG_ALERT_IDENT</NAME>
#define MSG_ALERT_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_ALERT_CREATE_TIME</NAME>
#define MSG_ALERT_CREATE_TIME 28
</MACRO>
<MACRO>
<NAME>MSG_ALERT_DETECT_TIME</NAME>
#define MSG_ALERT_DETECT_TIME 29
</MACRO>
<MACRO>
<NAME>MSG_ALERT_ANALYZER_TIME</NAME>
#define MSG_ALERT_ANALYZER_TIME 30
</MACRO>
<MACRO>
<NAME>MSG_HEARTBEAT_IDENT</NAME>
#define MSG_HEARTBEAT_IDENT 27
</MACRO>
<MACRO>
<NAME>MSG_HEARTBEAT_CREATE_TIME</NAME>
#define MSG_HEARTBEAT_CREATE_TIME 28
</MACRO>
<MACRO>
<NAME>MSG_HEARTBEAT_ANALYZER_TIME</NAME>
#define MSG_HEARTBEAT_ANALYZER_TIME 29
</MACRO>
<MACRO>
<NAME>MSG_MESSAGE_VERSION</NAME>
#define MSG_MESSAGE_VERSION 27
</MACRO>
<FUNCTION>
<NAME>idmef_value_new_int16</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
int16_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_uint16</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
uint16_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_int32</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
int32_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_uint32</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
uint32_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_int64</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
int64_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_uint64</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
uint64_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_float</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
float val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_double</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
double val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_string</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_time</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_data</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_object</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
void *object, idmef_object_type_t object_type
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_list</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_enum</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_object_type_t type, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_enum_string</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_object_type_t type, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_enum_numeric</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_object_type_t type, int val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_generic</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_value_type_id_t type, const char *buf
</FUNCTION>
<MACRO>
<NAME>idmef_value_get_hdr</NAME>
#define idmef_value_get_hdr(n, t) t idmef_value_get_ ## n (idmef_value_t *val)
</MACRO>
<MACRO>
<NAME>idmef_value_get_struct_hdr</NAME>
#define idmef_value_get_struct_hdr(n) idmef_ ## n ## _t *idmef_value_get_ ## n (idmef_value_t *val)
</MACRO>
<FUNCTION>
<NAME>idmef_value_list_add</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *list, idmef_value_t *new
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_is_list</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *list
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_list_empty</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *list
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_have_own_data</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_dont_have_own_data</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_type</NAME>
<RETURNS>idmef_value_type_id_t  </RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_object_type</NAME>
<RETURNS>idmef_object_type_t  </RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_object</NAME>
<RETURNS>void  *</RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_iterate</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *value, void *extra, int (*callback)(idmef_value_t *ptr, void *extra)
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_nth</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_value_t *val, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_count</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_clone</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_ref</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_to_string</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *val, char *buf, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get</NAME>
<RETURNS>int  </RETURNS>
void *res, idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_match</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *val1, idmef_value_t *val2, idmef_value_relation_t relation
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_check_relation</NAME>
<RETURNS>int  </RETURNS>
idmef_value_t *value, idmef_value_relation_t relation
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_relation_to_string</NAME>
<RETURNS>const char  *</RETURNS>
idmef_value_relation_t relation
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>prelude_daemonize</NAME>
<RETURNS>int  </RETURNS>
const char *lockfile
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_get</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_message_t *message,idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_set</NAME>
<RETURNS>int  </RETURNS>
idmef_message_t *message, idmef_object_t *object, idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_new</NAME>
<RETURNS>idmef_object_t  *</RETURNS>
const char * format, ...
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_new_v</NAME>
<RETURNS>idmef_object_t  *</RETURNS>
const char * format, va_list args
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_new_fast</NAME>
<RETURNS>idmef_object_t  *</RETURNS>
const char *buffer
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_get_type</NAME>
<RETURNS>idmef_object_type_t  </RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_get_value_type</NAME>
<RETURNS>idmef_value_type_id_t  </RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_set_number</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *object, uint8_t depth, uint8_t number
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_undefine_number</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *object, uint8_t depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_get_number</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *object, uint8_t depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_make_child</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *object, const char *child_name, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_make_parent</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_compare</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *o1, idmef_object_t *o2
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_clone</NAME>
<RETURNS>idmef_object_t  *</RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_ref</NAME>
<RETURNS>idmef_object_t  *</RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_get_numeric</NAME>
<RETURNS>char  *</RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_get_name</NAME>
<RETURNS>const char  *</RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_is_ambiguous</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_has_lists</NAME>
<RETURNS>int  </RETURNS>
idmef_object_t *object
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_new</NAME>
<RETURNS>idmef_object_value_t  *</RETURNS>
idmef_object_t *object, idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_get_object</NAME>
<RETURNS>idmef_object_t  *</RETURNS>
idmef_object_value_t *objval
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_get_value</NAME>
<RETURNS>idmef_value_t  *</RETURNS>
idmef_object_value_t *objval
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_object_value_t *objval
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_list_new</NAME>
<RETURNS>idmef_object_value_list_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_list_add</NAME>
<RETURNS>int  </RETURNS>
idmef_object_value_list_t *list, idmef_object_value_t *objval
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_list_get_next</NAME>
<RETURNS>idmef_object_value_t  *</RETURNS>
idmef_object_value_list_t *list
</FUNCTION>
<FUNCTION>
<NAME>idmef_object_value_list_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_object_value_list_t *list
</FUNCTION>
<ENUM>
<NAME>idmef_value_relation_t</NAME>
typedef enum {
        IDMEF_VALUE_RELATION_EQUAL       = 0x01,
        IDMEF_VALUE_RELATION_NOT_EQUAL   = 0x02,
        IDMEF_VALUE_RELATION_LESSER      = 0x04,
        IDMEF_VALUE_RELATION_GREATER     = 0x08,
        IDMEF_VALUE_RELATION_SUBSTR      = 0x10,
        IDMEF_VALUE_RELATION_REGEX       = 0x20,
        IDMEF_VALUE_RELATION_IS_NULL     = 0x40,
        IDMEF_VALUE_RELATION_IS_NOT_NULL = 0x80
} idmef_value_relation_t;
</ENUM>
<ENUM>
<NAME>idmef_value_type_id_t</NAME>
typedef enum {
        IDMEF_VALUE_TYPE_ERROR   =  -1,
        IDMEF_VALUE_TYPE_UNKNOWN =   0,
        IDMEF_VALUE_TYPE_INT16   =   1,
        IDMEF_VALUE_TYPE_UINT16  =   2,
        IDMEF_VALUE_TYPE_INT32   =   3,
        IDMEF_VALUE_TYPE_UINT32  =   4,
        IDMEF_VALUE_TYPE_INT64   =   5,
        IDMEF_VALUE_TYPE_UINT64  =   6,
        IDMEF_VALUE_TYPE_FLOAT   =   7,
        IDMEF_VALUE_TYPE_DOUBLE  =   8,
        IDMEF_VALUE_TYPE_STRING  =   9,
        IDMEF_VALUE_TYPE_TIME    =  10,
        IDMEF_VALUE_TYPE_DATA    =  11,
        IDMEF_VALUE_TYPE_ENUM    =  12,
        IDMEF_VALUE_TYPE_LIST    =  13,
        IDMEF_VALUE_TYPE_OBJECT  =  14
} idmef_value_type_id_t;
</ENUM>
<STRUCT>
<NAME>idmef_value_type_t</NAME>
struct idmef_value_type_t
{
        idmef_value_type_id_t id;
        idmef_value_type_data_t data;
};
</STRUCT>
<FUNCTION>
<NAME>idmef_value_type_copy</NAME>
<RETURNS>int  </RETURNS>
void *dst, idmef_value_type_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_type_read</NAME>
<RETURNS>int  </RETURNS>
idmef_value_type_t *dst, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_type_write</NAME>
<RETURNS>int  </RETURNS>
char *buf, size_t size, idmef_value_type_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_type_destroy</NAME>
<RETURNS>void  </RETURNS>
idmef_value_type_t *type
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_type_clone</NAME>
<RETURNS>int  </RETURNS>
idmef_value_type_t *dst, idmef_value_type_t *src
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_type_compare</NAME>
<RETURNS>int  </RETURNS>
idmef_value_type_t *type1, idmef_value_type_t *type2, idmef_value_relation_t relation
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_type_check_relation</NAME>
<RETURNS>int  </RETURNS>
idmef_value_type_t *type, idmef_value_relation_t relation
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_ident_send</NAME>
<RETURNS>int  </RETURNS>
uint64_t analyzerid, prelude_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>prelude_client_ident_init</NAME>
<RETURNS>int  </RETURNS>
prelude_client_t *client, uint64_t *analyzerid
</FUNCTION>
<FUNCTION>
<NAME>tls_unload_file</NAME>
<RETURNS>void  </RETURNS>
gnutls_datum *data
</FUNCTION>
<FUNCTION>
<NAME>tls_load_file</NAME>
<RETURNS>int  </RETURNS>
const char *filename, gnutls_datum *data
</FUNCTION>
<FUNCTION>
<NAME>tls_certificates_load</NAME>
<RETURNS>int  </RETURNS>
const char *keyfile, const char *certfile, gnutls_certificate_credentials cred
</FUNCTION>
