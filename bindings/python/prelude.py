# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_prelude', [dirname(__file__)])
        except ImportError:
            import _prelude
            return _prelude
        if fp is not None:
            try:
                _mod = imp.load_module('_prelude', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _prelude = swig_import_helper()
    del swig_import_helper
else:
    import _prelude
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _prelude.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _prelude.SwigPyIterator_value(self)
    def incr(self, n=1): return _prelude.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _prelude.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _prelude.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _prelude.SwigPyIterator_equal(self, *args)
    def copy(self): return _prelude.SwigPyIterator_copy(self)
    def next(self): return _prelude.SwigPyIterator_next(self)
    def __next__(self): return _prelude.SwigPyIterator___next__(self)
    def previous(self): return _prelude.SwigPyIterator_previous(self)
    def advance(self, *args): return _prelude.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _prelude.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _prelude.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _prelude.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _prelude.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _prelude.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _prelude.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _prelude.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import sys

def python2_unicode_patch(cl):
    if cl.__str__ is object.__str__:
        return cl

    if sys.version_info < (3, 0):
         cl.__unicode__ = lambda self: self.__str__().decode('utf-8')

    cl.__repr__ = lambda self: self.__class__.__name__ + "(" + repr(str(self)) + ")"
    return cl


def checkVersion(version=None):
  return _prelude.checkVersion(version)
checkVersion = _prelude.checkVersion
class ClientProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _prelude.new_ClientProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _prelude.delete_ClientProfile
    __del__ = lambda self : None;
    def getUid(self): return _prelude.ClientProfile_getUid(self)
    def getGid(self): return _prelude.ClientProfile_getGid(self)
    def getName(self): return _prelude.ClientProfile_getName(self)
    def setName(self, *args): return _prelude.ClientProfile_setName(self, *args)
    def getAnalyzerId(self): return _prelude.ClientProfile_getAnalyzerId(self)
    def setAnalyzerId(self, *args): return _prelude.ClientProfile_setAnalyzerId(self, *args)
    def getConfigFilename(self): return _prelude.ClientProfile_getConfigFilename(self)
    def getAnalyzeridFilename(self): return _prelude.ClientProfile_getAnalyzeridFilename(self)
    def getTlsKeyFilename(self): return _prelude.ClientProfile_getTlsKeyFilename(self)
    def getTlsServerCaCertFilename(self): return _prelude.ClientProfile_getTlsServerCaCertFilename(self)
    def getTlsServerKeyCertFilename(self): return _prelude.ClientProfile_getTlsServerKeyCertFilename(self)
    def getTlsServerCrlFilename(self): return _prelude.ClientProfile_getTlsServerCrlFilename(self)
    def getTlsClientKeyCertFilename(self): return _prelude.ClientProfile_getTlsClientKeyCertFilename(self)
    def getTlsClientTrustedCertFilename(self): return _prelude.ClientProfile_getTlsClientTrustedCertFilename(self)
    def getBackupDirname(self): return _prelude.ClientProfile_getBackupDirname(self)
    def getProfileDirname(self): return _prelude.ClientProfile_getProfileDirname(self)
    def setPrefix(self, *args): return _prelude.ClientProfile_setPrefix(self, *args)
    def getPrefix(self): return _prelude.ClientProfile_getPrefix(self)
ClientProfile_swigregister = _prelude.ClientProfile_swigregister
ClientProfile_swigregister(ClientProfile)

class Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _prelude.delete_Connection
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _prelude.new_Connection(*args)
        try: self.this.append(this)
        except: self.this = this
    def getConnection(self): return _prelude.Connection_getConnection(self)
    def close(self): return _prelude.Connection_close(self)
    def connect(self, *args): return _prelude.Connection_connect(self, *args)
    def setState(self, *args): return _prelude.Connection_setState(self, *args)
    def getState(self): return _prelude.Connection_getState(self)
    def setData(self, *args): return _prelude.Connection_setData(self, *args)
    def getData(self): return _prelude.Connection_getData(self)
    def getPermission(self): return _prelude.Connection_getPermission(self)
    def setPeerAnalyzerid(self, *args): return _prelude.Connection_setPeerAnalyzerid(self, *args)
    def getPeerAnalyzerid(self): return _prelude.Connection_getPeerAnalyzerid(self)
    def getLocalAddr(self): return _prelude.Connection_getLocalAddr(self)
    def getLocalPort(self): return _prelude.Connection_getLocalPort(self)
    def getPeerAddr(self): return _prelude.Connection_getPeerAddr(self)
    def getPeerPort(self): return _prelude.Connection_getPeerPort(self)
    def isAlive(self): return _prelude.Connection_isAlive(self)
    def getFd(self): return _prelude.Connection_getFd(self)
    def recvIDMEF(self): return _prelude.Connection_recvIDMEF(self)
Connection_swigregister = _prelude.Connection_swigregister
Connection_swigregister(Connection)

class ConnectionPool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionPool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionPool, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _prelude.delete_ConnectionPool
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _prelude.new_ConnectionPool(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self): return _prelude.ConnectionPool_init(self)
    def setConnectionString(self, *args): return _prelude.ConnectionPool_setConnectionString(self, *args)
    def getConnectionString(self): return _prelude.ConnectionPool_getConnectionString(self)
    def getConnectionList(self): return _prelude.ConnectionPool_getConnectionList(self)
    def setFlags(self, *args): return _prelude.ConnectionPool_setFlags(self, *args)
    def getFlags(self): return _prelude.ConnectionPool_getFlags(self)
    def setData(self, *args): return _prelude.ConnectionPool_setData(self, *args)
    def getData(self): return _prelude.ConnectionPool_getData(self)
    def addConnection(self, *args): return _prelude.ConnectionPool_addConnection(self, *args)
    def delConnection(self, *args): return _prelude.ConnectionPool_delConnection(self, *args)
    def setConnectionAlive(self, *args): return _prelude.ConnectionPool_setConnectionAlive(self, *args)
    def setConnectionDead(self, *args): return _prelude.ConnectionPool_setConnectionDead(self, *args)
    def setRequiredPermission(self, *args): return _prelude.ConnectionPool_setRequiredPermission(self, *args)
ConnectionPool_swigregister = _prelude.ConnectionPool_swigregister
ConnectionPool_swigregister(ConnectionPool)

class Client(ClientProfile):
    __swig_setmethods__ = {}
    for _s in [ClientProfile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Client, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProfile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Client, name)
    __repr__ = _swig_repr
    ASYNC_SEND = _prelude.Client_ASYNC_SEND
    FLAGS_ASYNC_SEND = _prelude.Client_FLAGS_ASYNC_SEND
    ASYNC_TIMER = _prelude.Client_ASYNC_TIMER
    FLAGS_ASYNC_TIMER = _prelude.Client_FLAGS_ASYNC_TIMER
    HEARTBEAT = _prelude.Client_HEARTBEAT
    FLAGS_HEARTBEAT = _prelude.Client_FLAGS_HEARTBEAT
    CONNECT = _prelude.Client_CONNECT
    FLAGS_CONNECT = _prelude.Client_FLAGS_CONNECT
    AUTOCONFIG = _prelude.Client_AUTOCONFIG
    FLAGS_AUTOCONFIG = _prelude.Client_FLAGS_AUTOCONFIG
    IDMEF_READ = _prelude.Client_IDMEF_READ
    PERMISSION_IDMEF_READ = _prelude.Client_PERMISSION_IDMEF_READ
    ADMIN_READ = _prelude.Client_ADMIN_READ
    PERMISSION_ADMIN_READ = _prelude.Client_PERMISSION_ADMIN_READ
    IDMEF_WRITE = _prelude.Client_IDMEF_WRITE
    PERMISSION_IDMEF_WRITE = _prelude.Client_PERMISSION_IDMEF_WRITE
    ADMIN_WRITE = _prelude.Client_ADMIN_WRITE
    PERMISSION_ADMIN_WRITE = _prelude.Client_PERMISSION_ADMIN_WRITE
    __swig_destroy__ = _prelude.delete_Client
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _prelude.new_Client(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self): return _prelude.Client_start(self)
    def init(self): return _prelude.Client_init(self)
    def getClient(self): return _prelude.Client_getClient(self)
    def sendIDMEF(self, *args): return _prelude.Client_sendIDMEF(self, *args)
    def recvIDMEF(self, *args, **kwargs): return _prelude.Client_recvIDMEF(self, *args, **kwargs)
    def getFlags(self): return _prelude.Client_getFlags(self)
    def setFlags(self, *args): return _prelude.Client_setFlags(self, *args)
    def getRequiredPermission(self): return _prelude.Client_getRequiredPermission(self)
    def setRequiredPermission(self, *args): return _prelude.Client_setRequiredPermission(self, *args)
    def getConfigFilename(self): return _prelude.Client_getConfigFilename(self)
    def setConfigFilename(self, *args): return _prelude.Client_setConfigFilename(self, *args)
    def getConnectionPool(self): return _prelude.Client_getConnectionPool(self)
    def setConnectionPool(self, *args): return _prelude.Client_setConnectionPool(self, *args)
    def __lshift__(self, *args): return _prelude.Client___lshift__(self, *args)
    def __rshift__(self, *args): return _prelude.Client___rshift__(self, *args)
    __swig_getmethods__["setRecvTimeout"] = lambda x: _prelude.Client_setRecvTimeout
    if _newclass:setRecvTimeout = staticmethod(_prelude.Client_setRecvTimeout)
Client_swigregister = _prelude.Client_swigregister
Client_swigregister(Client)

def Client_setRecvTimeout(*args):
  return _prelude.Client_setRecvTimeout(*args)
Client_setRecvTimeout = _prelude.Client_setRecvTimeout

class PreludeLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreludeLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreludeLog, name)
    __repr__ = _swig_repr
    DEBUG = _prelude.PreludeLog_DEBUG
    INFO = _prelude.PreludeLog_INFO
    WARNING = _prelude.PreludeLog_WARNING
    ERROR = _prelude.PreludeLog_ERROR
    CRITICAL = _prelude.PreludeLog_CRITICAL
    QUIET = _prelude.PreludeLog_QUIET
    SYSLOG = _prelude.PreludeLog_SYSLOG
    __swig_getmethods__["setLevel"] = lambda x: _prelude.PreludeLog_setLevel
    if _newclass:setLevel = staticmethod(_prelude.PreludeLog_setLevel)
    __swig_getmethods__["setDebugLevel"] = lambda x: _prelude.PreludeLog_setDebugLevel
    if _newclass:setDebugLevel = staticmethod(_prelude.PreludeLog_setDebugLevel)
    __swig_getmethods__["setFlags"] = lambda x: _prelude.PreludeLog_setFlags
    if _newclass:setFlags = staticmethod(_prelude.PreludeLog_setFlags)
    __swig_getmethods__["getFlags"] = lambda x: _prelude.PreludeLog_getFlags
    if _newclass:getFlags = staticmethod(_prelude.PreludeLog_getFlags)
    __swig_getmethods__["setLogfile"] = lambda x: _prelude.PreludeLog_setLogfile
    if _newclass:setLogfile = staticmethod(_prelude.PreludeLog_setLogfile)
    __swig_getmethods__["setCallback"] = lambda x: _prelude.PreludeLog_setCallback
    if _newclass:setCallback = staticmethod(_prelude.PreludeLog_setCallback)
    def __init__(self): 
        this = _prelude.new_PreludeLog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _prelude.delete_PreludeLog
    __del__ = lambda self : None;
PreludeLog_swigregister = _prelude.PreludeLog_swigregister
PreludeLog_swigregister(PreludeLog)

def PreludeLog_setLevel(*args):
  return _prelude.PreludeLog_setLevel(*args)
PreludeLog_setLevel = _prelude.PreludeLog_setLevel

def PreludeLog_setDebugLevel(*args):
  return _prelude.PreludeLog_setDebugLevel(*args)
PreludeLog_setDebugLevel = _prelude.PreludeLog_setDebugLevel

def PreludeLog_setFlags(*args):
  return _prelude.PreludeLog_setFlags(*args)
PreludeLog_setFlags = _prelude.PreludeLog_setFlags

def PreludeLog_getFlags():
  return _prelude.PreludeLog_getFlags()
PreludeLog_getFlags = _prelude.PreludeLog_getFlags

def PreludeLog_setLogfile(*args):
  return _prelude.PreludeLog_setLogfile(*args)
PreludeLog_setLogfile = _prelude.PreludeLog_setLogfile

def PreludeLog_setCallback(*args):
  return _prelude.PreludeLog_setCallback(*args)
PreludeLog_setCallback = _prelude.PreludeLog_setCallback

class PreludeError(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreludeError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreludeError, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _prelude.delete_PreludeError
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _prelude.new_PreludeError(*args)
        try: self.this.append(this)
        except: self.this = this
    def getCode(self): return _prelude.PreludeError_getCode(self)
    def what(self): return _prelude.PreludeError_what(self)
    def __str__(self): return _prelude.PreludeError___str__(self)
    def __int__(self): return _prelude.PreludeError___int__(self)
PreludeError_swigregister = _prelude.PreludeError_swigregister
PreludeError_swigregister(PreludeError)

class ClientEasy(Client):
    __swig_setmethods__ = {}
    for _s in [Client]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientEasy, name, value)
    __swig_getmethods__ = {}
    for _s in [Client]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClientEasy, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _prelude.new_ClientEasy(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _prelude.delete_ClientEasy
    __del__ = lambda self : None;
ClientEasy_swigregister = _prelude.ClientEasy_swigregister
ClientEasy_swigregister(ClientEasy)

class IDMEFCriterion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDMEFCriterion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDMEFCriterion, name)
    __repr__ = _swig_repr
    OPERATOR_NOT = _prelude.IDMEFCriterion_OPERATOR_NOT
    OPERATOR_NOCASE = _prelude.IDMEFCriterion_OPERATOR_NOCASE
    OPERATOR_EQUAL = _prelude.IDMEFCriterion_OPERATOR_EQUAL
    OPERATOR_EQUAL_NOCASE = _prelude.IDMEFCriterion_OPERATOR_EQUAL_NOCASE
    OPERATOR_NOT_EQUAL = _prelude.IDMEFCriterion_OPERATOR_NOT_EQUAL
    OPERATOR_NOT_EQUAL_NOCASE = _prelude.IDMEFCriterion_OPERATOR_NOT_EQUAL_NOCASE
    OPERATOR_LESSER = _prelude.IDMEFCriterion_OPERATOR_LESSER
    OPERATOR_LESSER_OR_EQUAL = _prelude.IDMEFCriterion_OPERATOR_LESSER_OR_EQUAL
    OPERATOR_GREATER = _prelude.IDMEFCriterion_OPERATOR_GREATER
    OPERATOR_GREATER_OR_EQUAL = _prelude.IDMEFCriterion_OPERATOR_GREATER_OR_EQUAL
    OPERATOR_SUBSTR = _prelude.IDMEFCriterion_OPERATOR_SUBSTR
    OPERATOR_SUBSTR_NOCASE = _prelude.IDMEFCriterion_OPERATOR_SUBSTR_NOCASE
    OPERATOR_NOT_SUBSTR = _prelude.IDMEFCriterion_OPERATOR_NOT_SUBSTR
    OPERATOR_NOT_SUBSTR_NOCASE = _prelude.IDMEFCriterion_OPERATOR_NOT_SUBSTR_NOCASE
    OPERATOR_REGEX = _prelude.IDMEFCriterion_OPERATOR_REGEX
    OPERATOR_REGEX_NOCASE = _prelude.IDMEFCriterion_OPERATOR_REGEX_NOCASE
    OPERATOR_NOT_REGEX = _prelude.IDMEFCriterion_OPERATOR_NOT_REGEX
    OPERATOR_NOT_REGEX_NOCASE = _prelude.IDMEFCriterion_OPERATOR_NOT_REGEX_NOCASE
    OPERATOR_NULL = _prelude.IDMEFCriterion_OPERATOR_NULL
    OPERATOR_NOT_NULL = _prelude.IDMEFCriterion_OPERATOR_NOT_NULL
    def __init__(self): 
        this = _prelude.new_IDMEFCriterion()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _prelude.delete_IDMEFCriterion
    __del__ = lambda self : None;
IDMEFCriterion_swigregister = _prelude.IDMEFCriterion_swigregister
IDMEFCriterion_swigregister(IDMEFCriterion)

class IDMEFCriteria(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDMEFCriteria, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDMEFCriteria, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _prelude.delete_IDMEFCriteria
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _prelude.new_IDMEFCriteria(*args)
        try: self.this.append(this)
        except: self.this = this
    def match(self, *args): return _prelude.IDMEFCriteria_match(self, *args)
    def clone(self): return _prelude.IDMEFCriteria_clone(self)
    def andCriteria(self, *args): return _prelude.IDMEFCriteria_andCriteria(self, *args)
    def orCriteria(self, *args): return _prelude.IDMEFCriteria_orCriteria(self, *args)
    def toString(self): return _prelude.IDMEFCriteria_toString(self)
    def __str__(self): return _prelude.IDMEFCriteria___str__(self)
IDMEFCriteria_swigregister = _prelude.IDMEFCriteria_swigregister
IDMEFCriteria_swigregister(IDMEFCriteria)

class IDMEFValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDMEFValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDMEFValue, name)
    __repr__ = _swig_repr
    TYPE_UNKNOWN = _prelude.IDMEFValue_TYPE_UNKNOWN
    TYPE_INT8 = _prelude.IDMEFValue_TYPE_INT8
    TYPE_UINT8 = _prelude.IDMEFValue_TYPE_UINT8
    TYPE_INT16 = _prelude.IDMEFValue_TYPE_INT16
    TYPE_UINT16 = _prelude.IDMEFValue_TYPE_UINT16
    TYPE_INT32 = _prelude.IDMEFValue_TYPE_INT32
    TYPE_UINT32 = _prelude.IDMEFValue_TYPE_UINT32
    TYPE_INT64 = _prelude.IDMEFValue_TYPE_INT64
    TYPE_UINT64 = _prelude.IDMEFValue_TYPE_UINT64
    TYPE_FLOAT = _prelude.IDMEFValue_TYPE_FLOAT
    TYPE_DOUBLE = _prelude.IDMEFValue_TYPE_DOUBLE
    TYPE_STRING = _prelude.IDMEFValue_TYPE_STRING
    TYPE_TIME = _prelude.IDMEFValue_TYPE_TIME
    TYPE_DATA = _prelude.IDMEFValue_TYPE_DATA
    TYPE_ENUM = _prelude.IDMEFValue_TYPE_ENUM
    TYPE_LIST = _prelude.IDMEFValue_TYPE_LIST
    TYPE_CLASS = _prelude.IDMEFValue_TYPE_CLASS
    def getType(self): return _prelude.IDMEFValue_getType(self)
    def isNull(self): return _prelude.IDMEFValue_isNull(self)
    __swig_destroy__ = _prelude.delete_IDMEFValue
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _prelude.new_IDMEFValue(*args)
        try: self.this.append(this)
        except: self.this = this
    def match(self, *args): return _prelude.IDMEFValue_match(self, *args)
    def clone(self): return _prelude.IDMEFValue_clone(self)
    def toString(self): return _prelude.IDMEFValue_toString(self)
    def __le__(self, *args): return _prelude.IDMEFValue___le__(self, *args)
    def __ge__(self, *args): return _prelude.IDMEFValue___ge__(self, *args)
    def __lt__(self, *args): return _prelude.IDMEFValue___lt__(self, *args)
    def __gt__(self, *args): return _prelude.IDMEFValue___gt__(self, *args)
    def __eq__(self, *args): return _prelude.IDMEFValue___eq__(self, *args)
    def __ne__(self, *args): return _prelude.IDMEFValue___ne__(self, *args)
    def __hash__(self): return _prelude.IDMEFValue___hash__(self)
IDMEFValue_swigregister = _prelude.IDMEFValue_swigregister
IDMEFValue_swigregister(IDMEFValue)

class IDMEFPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDMEFPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDMEFPath, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _prelude.new_IDMEFPath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _prelude.delete_IDMEFPath
    __del__ = lambda self : None;
    def set(self, *args): return _prelude.IDMEFPath_set(self, *args)
    def getClass(self, *args, **kwargs): return _prelude.IDMEFPath_getClass(self, *args, **kwargs)
    def getValueType(self, *args, **kwargs): return _prelude.IDMEFPath_getValueType(self, *args, **kwargs)
    def setIndex(self, *args, **kwargs): return _prelude.IDMEFPath_setIndex(self, *args, **kwargs)
    def undefineIndex(self, *args, **kwargs): return _prelude.IDMEFPath_undefineIndex(self, *args, **kwargs)
    def getIndex(self, *args, **kwargs): return _prelude.IDMEFPath_getIndex(self, *args, **kwargs)
    def makeChild(self, *args): return _prelude.IDMEFPath_makeChild(self, *args)
    def makeParent(self): return _prelude.IDMEFPath_makeParent(self)
    def compare(self, *args, **kwargs): return _prelude.IDMEFPath_compare(self, *args, **kwargs)
    def clone(self): return _prelude.IDMEFPath_clone(self)
    def checkOperator(self, *args): return _prelude.IDMEFPath_checkOperator(self, *args)
    def getApplicableOperators(self): return _prelude.IDMEFPath_getApplicableOperators(self)
    def getName(self, *args, **kwargs): return _prelude.IDMEFPath_getName(self, *args, **kwargs)
    def isAmbiguous(self): return _prelude.IDMEFPath_isAmbiguous(self)
    def hasLists(self): return _prelude.IDMEFPath_hasLists(self)
    def isList(self, *args, **kwargs): return _prelude.IDMEFPath_isList(self, *args, **kwargs)
    def getDepth(self): return _prelude.IDMEFPath_getDepth(self)
    def get(self, *args): return _prelude.IDMEFPath_get(self, *args)
IDMEFPath_swigregister = _prelude.IDMEFPath_swigregister
IDMEFPath_swigregister(IDMEFPath)

class IDMEFTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDMEFTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDMEFTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _prelude.new_IDMEFTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _prelude.delete_IDMEFTime
    __del__ = lambda self : None;
    def set(self, *args): return _prelude.IDMEFTime_set(self, *args)
    def setSec(self, *args): return _prelude.IDMEFTime_setSec(self, *args)
    def setUSec(self, *args): return _prelude.IDMEFTime_setUSec(self, *args)
    def setGmtOffset(self, *args): return _prelude.IDMEFTime_setGmtOffset(self, *args)
    def getSec(self): return _prelude.IDMEFTime_getSec(self)
    def getUSec(self): return _prelude.IDMEFTime_getUSec(self)
    def getGmtOffset(self): return _prelude.IDMEFTime_getGmtOffset(self)
    def clone(self): return _prelude.IDMEFTime_clone(self)
    def toString(self): return _prelude.IDMEFTime_toString(self)
    def __int__(self): return _prelude.IDMEFTime___int__(self)
    def __long__(self): return _prelude.IDMEFTime___long__(self)
    def __float__(self): return _prelude.IDMEFTime___float__(self)
    def __str__(self): return _prelude.IDMEFTime___str__(self)
    def __ne__(self, *args): return _prelude.IDMEFTime___ne__(self, *args)
    def __ge__(self, *args): return _prelude.IDMEFTime___ge__(self, *args)
    def __le__(self, *args): return _prelude.IDMEFTime___le__(self, *args)
    def __eq__(self, *args): return _prelude.IDMEFTime___eq__(self, *args)
    def __gt__(self, *args): return _prelude.IDMEFTime___gt__(self, *args)
    def __lt__(self, *args): return _prelude.IDMEFTime___lt__(self, *args)
IDMEFTime_swigregister = _prelude.IDMEFTime_swigregister
IDMEFTime_swigregister(IDMEFTime)

class IDMEFClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDMEFClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDMEFClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _prelude.new_IDMEFClass(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDepth(self): return _prelude.IDMEFClass_getDepth(self)
    def getChild(self, *args): return _prelude.IDMEFClass_getChild(self, *args)
    def get(self, *args): return _prelude.IDMEFClass_get(self, *args)
    def isList(self): return _prelude.IDMEFClass_isList(self)
    def isKeyedList(self): return _prelude.IDMEFClass_isKeyedList(self)
    def getName(self): return _prelude.IDMEFClass_getName(self)
    def getValueType(self): return _prelude.IDMEFClass_getValueType(self)
    def getPath(self, *args, **kwargs): return _prelude.IDMEFClass_getPath(self, *args, **kwargs)
    def getEnumValues(self): return _prelude.IDMEFClass_getEnumValues(self)
    def getApplicableOperator(self): return _prelude.IDMEFClass_getApplicableOperator(self)
    def __getitem__(self, key):
            if isinstance(key, slice):
                    return itertools.islice(self, key.start, key.stop, key.step)

            try:
                    return self.get(key)
            except Exception as e:
                    raise IndexError

    def __str__(self):
            return self.getName()

    def __repr__(self):
            return "IDMEFClass(" + self.getName() + ", ".join([repr(i) for i in self]) + "\n)"

    __swig_destroy__ = _prelude.delete_IDMEFClass
    __del__ = lambda self : None;
IDMEFClass_swigregister = _prelude.IDMEFClass_swigregister
IDMEFClass_swigregister(IDMEFClass)

class IDMEF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDMEF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDMEF, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _prelude.delete_IDMEF
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _prelude.new_IDMEF(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _prelude.IDMEF_set(self, *args)
    def __deepcopy__(self, memo):
            return _prelude.IDMEF_clone(self.this)


    def getId(self): return _prelude.IDMEF_getId(self)
    def toString(self): return _prelude.IDMEF_toString(self)
    def __str__(self): return _prelude.IDMEF___str__(self)
    def __eq__(self, *args): return _prelude.IDMEF___eq__(self, *args)
    def __setitem__(self, key, value):
            return self.set(key, value)

    def __getitem__(self, key):
            try:
                    return self.get(key)
            except:
                    raise IndexError


    def write(self, *args): return _prelude.IDMEF_write(self, *args)
    def read(self, *args): return _prelude.IDMEF_read(self, *args)
    def __rshift__(self, *args): return _prelude.IDMEF___rshift__(self, *args)
    def __lshift__(self, *args): return _prelude.IDMEF___lshift__(self, *args)
    def get(self, *args): return _prelude.IDMEF_get(self, *args)
IDMEF_swigregister = _prelude.IDMEF_swigregister
IDMEF_swigregister(IDMEF)

for i in (IDMEF, IDMEFCriteria, IDMEFCriterion, IDMEFValue, IDMEFPath, IDMEFTime,
          Client, ClientEasy, ClientProfile, Connection, ConnectionPool, PreludeLog, PreludeError):
    python2_unicode_patch(i)

# This file is compatible with both classic and new-style classes.


