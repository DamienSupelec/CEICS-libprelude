/*****
*
* Copyright (C) 2004, 2005 PreludeIDS Technologies. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoann.v@prelude-ids.com>
*
* This file is part of the Prelude program.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; see the file COPYING.  If not, write to
* the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
*
*****/

#ifndef _LIBPRELUDE_PRELUDE_ERROR_H
#define _LIBPRELUDE_PRELUDE_ERROR_H

#include <errno.h>

#ifdef __cplusplus
 extern "C" {
#endif


/*
 * This is inspired from the GPG error interface.
 *
 * Bit 1 of prelude_error_t remain set (negative value).
 * Bit 2 to 9 are set to the source of the error.
 * Bit 10 to 16 are unspecified.
 * Bit 16 to 32 are set to the code of the error.
 */


#define PRELUDE_ERROR_SYSTEM_ERROR    (1 << 15)

typedef enum {
@include err-sources.in

	PRELUDE_ERROR_SOURCE_DIM = 256
} prelude_error_source_t;

typedef enum {
@include err-codes.in
@include errnos.in	

	PRELUDE_ERROR_CODE_DIM = 65536
} prelude_error_code_t;


#ifndef PRELUDE_ERROR_SOURCE_DEFAULT
 #define PRELUDE_ERROR_SOURCE_DEFAULT  PRELUDE_ERROR_SOURCE_UNKNOWN
#endif

#define PRELUDE_ERROR_CODE_MASK       (PRELUDE_ERROR_CODE_DIM - 1)
#define PRELUDE_ERROR_SOURCE_MASK     (PRELUDE_ERROR_SOURCE_DIM - 1)
#define PRELUDE_ERROR_SOURCE_SHIFT    23


typedef signed int prelude_error_t;


prelude_error_code_t prelude_error_code_from_errno(int err);


static inline prelude_error_t prelude_error_make(prelude_error_source_t source, prelude_error_code_t code)
{
	return (code == PRELUDE_ERROR_NO_ERROR) ? PRELUDE_ERROR_GENERIC : -((source << PRELUDE_ERROR_SOURCE_SHIFT) | code);
}


static inline prelude_error_t prelude_error_make_from_errno(prelude_error_source_t source, int err)
{
	prelude_error_code_t code = prelude_error_code_from_errno(err);
	return (code == PRELUDE_ERROR_NO_ERROR) ? PRELUDE_ERROR_GENERIC : -((source << PRELUDE_ERROR_SOURCE_SHIFT) | code);
}


static inline prelude_error_t prelude_error(prelude_error_code_t code)
{
        return prelude_error_make(PRELUDE_ERROR_SOURCE_DEFAULT, code);
}


static inline prelude_error_code_t prelude_error_get_code(prelude_error_t error)
{
        return (prelude_error_code_t) ((-error) & PRELUDE_ERROR_CODE_MASK);
}


static inline prelude_error_source_t prelude_error_get_source(prelude_error_t error)
{
        return (prelude_error_source_t) (((-error) >> PRELUDE_ERROR_SOURCE_SHIFT) & PRELUDE_ERROR_SOURCE_MASK);
}


static inline prelude_error_t prelude_error_from_errno(int err)
{
        return prelude_error_make(PRELUDE_ERROR_SOURCE_DEFAULT, prelude_error_code_from_errno(err));
}


void prelude_perror(prelude_error_t err, const char *fmt, ...);

const char *prelude_strerror(prelude_error_t err);

const char *prelude_strsource(prelude_error_t err);

int prelude_error_code_to_errno(prelude_error_code_t code);

#ifdef __cplusplus
 }
#endif


#endif
